/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040300
#define SWIGJAVA
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION) || defined(DEBUG_DIRECTOR_THREAD_NAME)
#include <iostream>
#endif

#include <exception>

#if defined(SWIG_JAVA_USE_THREAD_NAME)

#if !defined(SWIG_JAVA_GET_THREAD_NAME)
namespace Swig {
  SWIGINTERN int GetThreadName(char *name, size_t len);
}

#if defined(__linux__)

#include <sys/prctl.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
#if defined(PR_GET_NAME)
  return prctl(PR_GET_NAME, (unsigned long)name, 0, 0, 0);
#else
  (void)name;
  return 1;
#endif
}

#elif defined(__unix__) || defined(__APPLE__)

#include <pthread.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  return pthread_getname_np(pthread_self(), name, len);
}

#else

SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
  (void)name;
  return 1;
}
#endif

#endif

#endif

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
#include <pthread.h>
#endif

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(SWIG_NULLPTR), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = SWIG_NULLPTR;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, SWIG_NULLPTR) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = SWIG_NULLPTR;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
    static void detach(void *jvm) {
      static_cast<JavaVM *>(jvm)->DetachCurrentThread();
    }

    static void make_detach_key() {
      pthread_key_create(&detach_key_, detach);
    }

    /* thread-local key to register a destructor */
    static pthread_key_t detach_key_;
#endif

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
  pthread_key_t JObjectWrapper::detach_key_;
#endif

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(SWIG_NULLPTR), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_2;
        args.group = SWIG_NULLPTR;
        args.name = SWIG_NULLPTR;
#if defined(SWIG_JAVA_USE_THREAD_NAME)
        char thread_name[64];  // MAX_TASK_COMM_LEN=16 is hard-coded in the Linux kernel and MacOS has MAXTHREADNAMESIZE=64.
        if (Swig::GetThreadName(thread_name, sizeof(thread_name)) == 0) {
          args.name = thread_name;
#if defined(DEBUG_DIRECTOR_THREAD_NAME)
          std::cout << "JNIEnvWrapper: thread name: " << thread_name << std::endl;
        } else {
          std::cout << "JNIEnvWrapper: Couldn't set Java thread name" << std::endl;
#endif
        }
#endif
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, &args);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, &args);
#endif

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
        // At least on Android 6, detaching after every call causes a memory leak.
        // Instead, register a thread desructor and detach only when the thread ends.
        // See https://developer.android.com/training/articles/perf-jni#threads
        static pthread_once_t once = PTHREAD_ONCE_INIT;

        pthread_once(&once, JObjectWrapper::make_detach_key);
        pthread_setspecific(JObjectWrapper::detach_key_, director->swig_jvm_);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_DETACH_ON_THREAD_END) && !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    struct SwigDirectorMethod {
      const char *name;
      const char *desc;
      jmethodID methid;
      SwigDirectorMethod(JNIEnv *jenv, jclass baseclass, const char *name, const char *desc) : name(name), desc(desc) {
        methid = jenv->GetMethodID(baseclass, name, desc);
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, SWIG_NULLPTR) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

    jclass swig_new_global_ref(JNIEnv *jenv, const char *classname) {
      jclass clz = jenv->FindClass(classname);
      return clz ? (jclass)jenv->NewGlobalRef(clz) : SWIG_NULLPTR;
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) SWIG_NULLPTR), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(SWIG_NULLPTR) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, SWIG_NULLPTR);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = SWIG_NULLPTR;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == SWIG_NULLPTR && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(SWIG_NULLPTR), msg_(SWIG_NULLPTR) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(SWIG_NULLPTR);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(SWIG_NULLPTR));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(SWIG_NULLPTR), throwable_(SWIG_NULLPTR), classname_(SWIG_NULLPTR), msg_(msg ? copystr(msg) : SWIG_NULLPTR) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = SWIG_NULLPTR;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = SWIG_NULLPTR;
          jclass throwableclass = SWIG_NULLPTR;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = SWIG_NULLPTR;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_mragent_javaJNI = NULL;
    jmethodID director_method_ids[1];
  }
}

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif



#include <string>

#include <stdint.h>

#include "ImiMrTypes.h"
#include "ImiMrAgent.h"



struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "api_java.h"

SwigDirector_AppContext::SwigDirector_AppContext(JNIEnv *jenv) : imimr::AppContext(), Swig::Director(jenv) {
}

SwigDirector_AppContext::~SwigDirector_AppContext() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_AppContext::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/sximi/mragent/AppContext");
  if (!baseclass) return;
  
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    
  }
}


SwigDirector_MrAgentExceptionHandler::SwigDirector_MrAgentExceptionHandler(JNIEnv *jenv) : imimr::MrAgentExceptionHandler(), Swig::Director(jenv) {
}

SwigDirector_MrAgentExceptionHandler::~SwigDirector_MrAgentExceptionHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_MrAgentExceptionHandler::onExceptionHandle(imimr::MrAgentException exception) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jexception  ;
  
  if (!swig_override[0]) {
    imimr::MrAgentExceptionHandler::onExceptionHandle(exception);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jexception = (jint) exception;
    jenv->CallStaticVoidMethod(Swig::jclass_mragent_javaJNI, Swig::director_method_ids[0], swigjobj, jexception);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in imimr::MrAgentExceptionHandler::onExceptionHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MrAgentExceptionHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/sximi/mragent/MrAgentExceptionHandler");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onExceptionHandle", "(I)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1javaJNI_getVersion(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = imimr::getVersion();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1AppContext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::AppContext *arg1 = (imimr::AppContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::AppContext **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1AppContext(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::AppContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::AppContext *)new SwigDirector_AppContext(jenv);
  *(imimr::AppContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_AppContext_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  imimr::AppContext *obj = *((imimr::AppContext **)&objarg);
  (void)jcls;
  SwigDirector_AppContext *director = static_cast<SwigDirector_AppContext *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_AppContext_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  imimr::AppContext *obj = *((imimr::AppContext **)&objarg);
  SwigDirector_AppContext *director = dynamic_cast<SwigDirector_AppContext *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1ImiContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::AppContext *arg1 = (imimr::AppContext *) 0 ;
  imimr::ImiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::AppContext **)&jarg1; 
  result = (imimr::ImiContext *)new imimr::ImiContext(arg1);
  *(imimr::ImiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1ImiContext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiContext *arg1 = (imimr::ImiContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiContext **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_ImiContext_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::AppContext *arg1 = (imimr::AppContext *) 0 ;
  imimr::ImiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::AppContext **)&jarg1; 
  result = (imimr::ImiContext *)imimr::ImiContext::create(arg1);
  *(imimr::ImiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_ImiContext_1getContext(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiContext *)imimr::ImiContext::getContext();
  *(imimr::ImiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_sximi_mragent_mragent_1javaJNI_ImiContext_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  imimr::ImiContext *arg1 = (imimr::ImiContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiContext **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->initialize((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_ImiContext_1setRemoteAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  imimr::ImiContext *arg1 = (imimr::ImiContext *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiContext **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setRemoteAddress(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_ImiContext_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  imimr::ImiContext *arg1 = (imimr::ImiContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiContext **)&jarg1; 
  (arg1)->release();
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_ImiContext_1createDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiContext *arg1 = (imimr::ImiContext *) 0 ;
  imimr::ImiBaseDevice result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiContext **)&jarg1; 
  result = (arg1)->createDevice();
  *(imimr::ImiBaseDevice **)&jresult = result ? new imimr::ImiBaseDevice(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_ImiContext_1getLastError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiContext *arg1 = (imimr::ImiContext *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiContext **)&jarg1; 
  result = (int)(arg1)->getLastError();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1javaJNI_ImiContext_1GetErrorString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = imimr::ImiContext::GetErrorString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_ImiContext_1setLogConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  imimr::ImiContext *arg1 = (imimr::ImiContext *) 0 ;
  imimr::LogConfig arg2 ;
  imimr::LogConfig *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiContext **)&jarg1; 
  argp2 = *(imimr::LogConfig **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null imimr::LogConfig");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->setLogConfig(SWIG_STD_MOVE(arg2));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IImiDeviceProperty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IImiDeviceProperty *arg1 = (imimr::IImiDeviceProperty *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::IImiDeviceProperty **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiDeviceProperty_1dataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiDeviceProperty *arg1 = (imimr::IImiDeviceProperty *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IImiDeviceProperty **)&jarg1; 
  result = (int)((imimr::IImiDeviceProperty const *)arg1)->dataSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1MrAgentExceptionHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::MrAgentExceptionHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::MrAgentExceptionHandler *)new SwigDirector_MrAgentExceptionHandler(jenv);
  *(imimr::MrAgentExceptionHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1MrAgentExceptionHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::MrAgentExceptionHandler *arg1 = (imimr::MrAgentExceptionHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::MrAgentExceptionHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_MrAgentExceptionHandler_1onExceptionHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::MrAgentExceptionHandler *arg1 = (imimr::MrAgentExceptionHandler *) 0 ;
  imimr::MrAgentException arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::MrAgentExceptionHandler **)&jarg1; 
  arg2 = (imimr::MrAgentException)jarg2; 
  (arg1)->onExceptionHandle(arg2);
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_MrAgentExceptionHandler_1onExceptionHandleSwigExplicitMrAgentExceptionHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::MrAgentExceptionHandler *arg1 = (imimr::MrAgentExceptionHandler *) 0 ;
  imimr::MrAgentException arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::MrAgentExceptionHandler **)&jarg1; 
  arg2 = (imimr::MrAgentException)jarg2; 
  (arg1)->imimr::MrAgentExceptionHandler::onExceptionHandle(arg2);
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_MrAgentExceptionHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  imimr::MrAgentExceptionHandler *obj = *((imimr::MrAgentExceptionHandler **)&objarg);
  (void)jcls;
  SwigDirector_MrAgentExceptionHandler *director = static_cast<SwigDirector_MrAgentExceptionHandler *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_MrAgentExceptionHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  imimr::MrAgentExceptionHandler *obj = *((imimr::MrAgentExceptionHandler **)&objarg);
  SwigDirector_MrAgentExceptionHandler *director = dynamic_cast<SwigDirector_MrAgentExceptionHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jboolean JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseDevice_1sendCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  imimr::IImiBaseDevice *arg1 = (imimr::IImiBaseDevice *) 0 ;
  cmd_data_native arg2 ;
  std::shared_ptr< imimr::IImiBaseDevice > *smartarg1 = 0 ;
  cmd_data_native *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseDevice > **)&jarg1;
  arg1 = (imimr::IImiBaseDevice *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(cmd_data_native **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cmd_data_native");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->sendCommand(SWIG_STD_MOVE(arg2));
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseDevice_1setOnExceptionHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::IImiBaseDevice *arg1 = (imimr::IImiBaseDevice *) 0 ;
  imimr::MrAgentExceptionHandler *arg2 = (imimr::MrAgentExceptionHandler *) 0 ;
  std::shared_ptr< imimr::IImiBaseDevice > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseDevice > **)&jarg1;
  arg1 = (imimr::IImiBaseDevice *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(imimr::MrAgentExceptionHandler **)&jarg2; 
  (arg1)->setOnExceptionHandler(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseDevice_1getMrManagerStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiBaseDevice *arg1 = (imimr::IImiBaseDevice *) 0 ;
  std::shared_ptr< imimr::IImiBaseDevice > *smartarg1 = 0 ;
  imimr::MrManagerStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseDevice > **)&jarg1;
  arg1 = (imimr::IImiBaseDevice *)(smartarg1 ? smartarg1->get() : 0); 
  result = (imimr::MrManagerStatus)(arg1)->getMrManagerStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IImiBaseDevice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IImiBaseDevice *arg1 = (imimr::IImiBaseDevice *) 0 ;
  std::shared_ptr< imimr::IImiBaseDevice > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseDevice > **)&jarg1;
  arg1 = (imimr::IImiBaseDevice *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseDevice_1getSensor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imimr::IImiBaseDevice *arg1 = (imimr::IImiBaseDevice *) 0 ;
  imimr::ImiSensorType arg2 ;
  std::shared_ptr< imimr::IImiBaseDevice > *smartarg1 = 0 ;
  imimr::ImiBaseSensor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseDevice > **)&jarg1;
  arg1 = (imimr::IImiBaseDevice *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (imimr::ImiSensorType)jarg2; 
  result = (arg1)->getSensor(arg2);
  *(imimr::ImiBaseSensor **)&jresult = result ? new imimr::ImiBaseSensor(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseDevice_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  imimr::IImiBaseDevice *arg1 = (imimr::IImiBaseDevice *) 0 ;
  int arg2 ;
  std::shared_ptr< imimr::IImiBaseDevice > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseDevice > **)&jarg1;
  arg1 = (imimr::IImiBaseDevice *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->open(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseDevice_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiBaseDevice *arg1 = (imimr::IImiBaseDevice *) 0 ;
  std::shared_ptr< imimr::IImiBaseDevice > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseDevice > **)&jarg1;
  arg1 = (imimr::IImiBaseDevice *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->close();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseDevice_1getVersions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::IImiBaseDevice *arg1 = (imimr::IImiBaseDevice *) 0 ;
  std::shared_ptr< imimr::IImiBaseDevice const > *smartarg1 = 0 ;
  imimr::ImiVersions result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiBaseDevice > **)&jarg1;
  arg1 = (imimr::IImiBaseDevice *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((imimr::IImiBaseDevice const *)arg1)->getVersions();
  *(imimr::ImiVersions **)&jresult = new imimr::ImiVersions(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseDevice_1setProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  imimr::IImiBaseDevice *arg1 = (imimr::IImiBaseDevice *) 0 ;
  int arg2 ;
  imimr::IImiDeviceProperty *arg3 = (imimr::IImiDeviceProperty *) 0 ;
  std::shared_ptr< imimr::IImiBaseDevice > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseDevice > **)&jarg1;
  arg1 = (imimr::IImiBaseDevice *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = *(imimr::IImiDeviceProperty **)&jarg3; 
  result = (int)(arg1)->setProperty(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseDevice_1getProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  imimr::IImiBaseDevice *arg1 = (imimr::IImiBaseDevice *) 0 ;
  int arg2 ;
  imimr::IImiDeviceProperty *arg3 = (imimr::IImiDeviceProperty *) 0 ;
  std::shared_ptr< imimr::IImiBaseDevice > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseDevice > **)&jarg1;
  arg1 = (imimr::IImiBaseDevice *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = *(imimr::IImiDeviceProperty **)&jarg3; 
  result = (int)(arg1)->getProperty(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IImiBaseSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IImiBaseSensor *arg1 = (imimr::IImiBaseSensor *) 0 ;
  std::shared_ptr< imimr::IImiBaseSensor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseSensor > **)&jarg1;
  arg1 = (imimr::IImiBaseSensor *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseSensor_1getSensorType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiBaseSensor *arg1 = (imimr::IImiBaseSensor *) 0 ;
  std::shared_ptr< imimr::IImiBaseSensor const > *smartarg1 = 0 ;
  imimr::ImiSensorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiBaseSensor > **)&jarg1;
  arg1 = (imimr::IImiBaseSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (imimr::ImiSensorType)((imimr::IImiBaseSensor const *)arg1)->getSensorType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseSensor_1start_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  imimr::IImiBaseSensor *arg1 = (imimr::IImiBaseSensor *) 0 ;
  int arg2 ;
  std::shared_ptr< imimr::IImiBaseSensor > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseSensor > **)&jarg1;
  arg1 = (imimr::IImiBaseSensor *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->start(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseSensor_1start_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiBaseSensor *arg1 = (imimr::IImiBaseSensor *) 0 ;
  std::shared_ptr< imimr::IImiBaseSensor > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseSensor > **)&jarg1;
  arg1 = (imimr::IImiBaseSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->start();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseSensor_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiBaseSensor *arg1 = (imimr::IImiBaseSensor *) 0 ;
  std::shared_ptr< imimr::IImiBaseSensor > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseSensor > **)&jarg1;
  arg1 = (imimr::IImiBaseSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->stop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseSensor_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiBaseSensor *arg1 = (imimr::IImiBaseSensor *) 0 ;
  std::shared_ptr< imimr::IImiBaseSensor > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseSensor > **)&jarg1;
  arg1 = (imimr::IImiBaseSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->release();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseSensor_1isStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imimr::IImiBaseSensor *arg1 = (imimr::IImiBaseSensor *) 0 ;
  std::shared_ptr< imimr::IImiBaseSensor const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiBaseSensor > **)&jarg1;
  arg1 = (imimr::IImiBaseSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((imimr::IImiBaseSensor const *)arg1)->isStarted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseSensor_1readFrame_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imimr::IImiBaseSensor *arg1 = (imimr::IImiBaseSensor *) 0 ;
  int arg2 ;
  std::shared_ptr< imimr::IImiBaseSensor > *smartarg1 = 0 ;
  imimr::ImiBaseFrame result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseSensor > **)&jarg1;
  arg1 = (imimr::IImiBaseSensor *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (arg1)->readFrame(arg2);
  *(imimr::ImiBaseFrame **)&jresult = result ? new imimr::ImiBaseFrame(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseSensor_1readFrame_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::IImiBaseSensor *arg1 = (imimr::IImiBaseSensor *) 0 ;
  std::shared_ptr< imimr::IImiBaseSensor > *smartarg1 = 0 ;
  imimr::ImiBaseFrame result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseSensor > **)&jarg1;
  arg1 = (imimr::IImiBaseSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->readFrame();
  *(imimr::ImiBaseFrame **)&jresult = result ? new imimr::ImiBaseFrame(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseSensor_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiBaseSensor *arg1 = (imimr::IImiBaseSensor *) 0 ;
  std::shared_ptr< imimr::IImiBaseSensor const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiBaseSensor > **)&jarg1;
  arg1 = (imimr::IImiBaseSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((imimr::IImiBaseSensor const *)arg1)->getWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseSensor_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiBaseSensor *arg1 = (imimr::IImiBaseSensor *) 0 ;
  std::shared_ptr< imimr::IImiBaseSensor const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiBaseSensor > **)&jarg1;
  arg1 = (imimr::IImiBaseSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((imimr::IImiBaseSensor const *)arg1)->getHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseSensor_1getDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiBaseSensor *arg1 = (imimr::IImiBaseSensor *) 0 ;
  std::shared_ptr< imimr::IImiBaseSensor const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiBaseSensor > **)&jarg1;
  arg1 = (imimr::IImiBaseSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((imimr::IImiBaseSensor const *)arg1)->getDepth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseSensor_1setWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::IImiBaseSensor *arg1 = (imimr::IImiBaseSensor *) 0 ;
  int arg2 ;
  std::shared_ptr< imimr::IImiBaseSensor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseSensor > **)&jarg1;
  arg1 = (imimr::IImiBaseSensor *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseSensor_1setHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::IImiBaseSensor *arg1 = (imimr::IImiBaseSensor *) 0 ;
  int arg2 ;
  std::shared_ptr< imimr::IImiBaseSensor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseSensor > **)&jarg1;
  arg1 = (imimr::IImiBaseSensor *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->setHeight(arg2);
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseSensor_1setDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::IImiBaseSensor *arg1 = (imimr::IImiBaseSensor *) 0 ;
  int arg2 ;
  std::shared_ptr< imimr::IImiBaseSensor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseSensor > **)&jarg1;
  arg1 = (imimr::IImiBaseSensor *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->setDepth(arg2);
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IImiBaseFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IImiBaseFrame *arg1 = (imimr::IImiBaseFrame *) 0 ;
  std::shared_ptr< imimr::IImiBaseFrame > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseFrame > **)&jarg1;
  arg1 = (imimr::IImiBaseFrame *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseFrame_1getSensorType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiBaseFrame *arg1 = (imimr::IImiBaseFrame *) 0 ;
  std::shared_ptr< imimr::IImiBaseFrame const > *smartarg1 = 0 ;
  imimr::ImiSensorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiBaseFrame > **)&jarg1;
  arg1 = (imimr::IImiBaseFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (imimr::ImiSensorType)((imimr::IImiBaseFrame const *)arg1)->getSensorType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseFrame_1getFrameNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiBaseFrame *arg1 = (imimr::IImiBaseFrame *) 0 ;
  std::shared_ptr< imimr::IImiBaseFrame const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiBaseFrame > **)&jarg1;
  arg1 = (imimr::IImiBaseFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((imimr::IImiBaseFrame const *)arg1)->getFrameNum();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseFrame_1getTimeStamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiBaseFrame *arg1 = (imimr::IImiBaseFrame *) 0 ;
  std::shared_ptr< imimr::IImiBaseFrame const > *smartarg1 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiBaseFrame > **)&jarg1;
  arg1 = (imimr::IImiBaseFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (long)((imimr::IImiBaseFrame const *)arg1)->getTimeStamp();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseFrame_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiBaseFrame *arg1 = (imimr::IImiBaseFrame *) 0 ;
  std::shared_ptr< imimr::IImiBaseFrame const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiBaseFrame > **)&jarg1;
  arg1 = (imimr::IImiBaseFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((imimr::IImiBaseFrame const *)arg1)->getWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseFrame_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiBaseFrame *arg1 = (imimr::IImiBaseFrame *) 0 ;
  std::shared_ptr< imimr::IImiBaseFrame const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiBaseFrame > **)&jarg1;
  arg1 = (imimr::IImiBaseFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((imimr::IImiBaseFrame const *)arg1)->getHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiBaseFrame_1getDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiBaseFrame *arg1 = (imimr::IImiBaseFrame *) 0 ;
  std::shared_ptr< imimr::IImiBaseFrame const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiBaseFrame > **)&jarg1;
  arg1 = (imimr::IImiBaseFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((imimr::IImiBaseFrame const *)arg1)->getDepth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IImiImageFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IImiImageFrame *arg1 = (imimr::IImiImageFrame *) 0 ;
  std::shared_ptr< imimr::IImiImageFrame > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiImageFrame > **)&jarg1;
  arg1 = (imimr::IImiImageFrame *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiImageFrame_1getPixelFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiImageFrame *arg1 = (imimr::IImiImageFrame *) 0 ;
  std::shared_ptr< imimr::IImiImageFrame const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiImageFrame > **)&jarg1;
  arg1 = (imimr::IImiImageFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((imimr::IImiImageFrame const *)arg1)->getPixelFormat();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiImageFrame_1getFps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiImageFrame *arg1 = (imimr::IImiImageFrame *) 0 ;
  std::shared_ptr< imimr::IImiImageFrame const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiImageFrame > **)&jarg1;
  arg1 = (imimr::IImiImageFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((imimr::IImiImageFrame const *)arg1)->getFps();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiImageFrame_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean _arg2, jobject jarg2) {
  imimr::IImiImageFrame *arg1 = (imimr::IImiImageFrame *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  std::shared_ptr< imimr::IImiImageFrame const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiImageFrame > **)&jarg1;
  arg1 = (imimr::IImiImageFrame *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if(_arg2){
      void *data =  jenv->GetDirectBufferAddress(jarg2);
      //LOGIS("ptr=",data)
      jobject obj = jarg2;
      size_t _len = jenv->GetDirectBufferCapacity(jarg2);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }else{
      jobject obj = jarg2;
      jbyteArray aa = (jbyteArray) jarg2;
      void *data = jenv->GetByteArrayElements(aa, 0);
      size_t _len = jenv->GetArrayLength(aa);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }
  }
  ((imimr::IImiImageFrame const *)arg1)->getData(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiImageFrame_1getDataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiImageFrame *arg1 = (imimr::IImiImageFrame *) 0 ;
  std::shared_ptr< imimr::IImiImageFrame const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiImageFrame > **)&jarg1;
  arg1 = (imimr::IImiImageFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((imimr::IImiImageFrame const *)arg1)->getDataSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiImageFrame_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::IImiImageFrame *arg1 = (imimr::IImiImageFrame *) 0 ;
  std::shared_ptr< imimr::IImiImageFrame const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiImageFrame > **)&jarg1;
  arg1 = (imimr::IImiImageFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((imimr::IImiImageFrame const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IImiColorFrame(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  imimr::IImiColorFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (imimr::IImiColorFrame *)new imimr::IImiColorFrame(arg1);
  
  *(std::shared_ptr<  imimr::IImiColorFrame > **)&jresult = result ? new std::shared_ptr<  imimr::IImiColorFrame >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IImiColorFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IImiColorFrame *arg1 = (imimr::IImiColorFrame *) 0 ;
  std::shared_ptr< imimr::IImiColorFrame > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiColorFrame > **)&jarg1;
  arg1 = (imimr::IImiColorFrame *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiColorFrame_1asMe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBaseFrame *arg1 = 0 ;
  imimr::ImiBaseFrame tempnull1 ;
  imimr::ImiColorFrame result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(imimr::ImiBaseFrame **)&jarg1 : &tempnull1; 
  result = imimr::IImiColorFrame::asMe((std::shared_ptr< imimr::IImiBaseFrame > const &)*arg1);
  *(imimr::ImiColorFrame **)&jresult = result ? new imimr::ImiColorFrame(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiColorFrame_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean _arg2, jobject jarg2) {
  imimr::IImiColorFrame *arg1 = (imimr::IImiColorFrame *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  std::shared_ptr< imimr::IImiColorFrame const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiColorFrame > **)&jarg1;
  arg1 = (imimr::IImiColorFrame *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if(_arg2){
      void *data =  jenv->GetDirectBufferAddress(jarg2);
      //LOGIS("ptr=",data)
      jobject obj = jarg2;
      size_t _len = jenv->GetDirectBufferCapacity(jarg2);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }else{
      jobject obj = jarg2;
      jbyteArray aa = (jbyteArray) jarg2;
      void *data = jenv->GetByteArrayElements(aa, 0);
      size_t _len = jenv->GetArrayLength(aa);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }
  }
  ((imimr::IImiColorFrame const *)arg1)->getData(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiColorFrame_1getDataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiColorFrame *arg1 = (imimr::IImiColorFrame *) 0 ;
  std::shared_ptr< imimr::IImiColorFrame const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiColorFrame > **)&jarg1;
  arg1 = (imimr::IImiColorFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((imimr::IImiColorFrame const *)arg1)->getDataSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiColorFrame_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  imimr::IImiColorFrame *arg1 = (imimr::IImiColorFrame *) 0 ;
  std::shared_ptr< imimr::IImiColorFrame > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiColorFrame > **)&jarg1;
  arg1 = (imimr::IImiColorFrame *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->release();
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IImiColorSensor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::IImiBaseDevice *arg1 = (imimr::IImiBaseDevice *) 0 ;
  std::shared_ptr< imimr::IImiBaseDevice > *smartarg1 = 0 ;
  imimr::IImiColorSensor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseDevice > **)&jarg1;
  arg1 = (imimr::IImiBaseDevice *)(smartarg1 ? smartarg1->get() : 0); 
  result = (imimr::IImiColorSensor *)new imimr::IImiColorSensor(arg1);
  
  *(std::shared_ptr<  imimr::IImiColorSensor > **)&jresult = result ? new std::shared_ptr<  imimr::IImiColorSensor >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IImiColorSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IImiColorSensor *arg1 = (imimr::IImiColorSensor *) 0 ;
  std::shared_ptr< imimr::IImiColorSensor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiColorSensor > **)&jarg1;
  arg1 = (imimr::IImiColorSensor *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiColorSensor_1asMe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBaseSensor *arg1 = 0 ;
  imimr::ImiBaseSensor tempnull1 ;
  imimr::ImiColorSensor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(imimr::ImiBaseSensor **)&jarg1 : &tempnull1; 
  result = imimr::IImiColorSensor::asMe((std::shared_ptr< imimr::IImiBaseSensor > const &)*arg1);
  *(imimr::ImiColorSensor **)&jresult = result ? new imimr::ImiColorSensor(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiColorSensor_1start_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  imimr::IImiColorSensor *arg1 = (imimr::IImiColorSensor *) 0 ;
  int arg2 ;
  std::shared_ptr< imimr::IImiColorSensor > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiColorSensor > **)&jarg1;
  arg1 = (imimr::IImiColorSensor *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->start(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiColorSensor_1start_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiColorSensor *arg1 = (imimr::IImiColorSensor *) 0 ;
  std::shared_ptr< imimr::IImiColorSensor > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiColorSensor > **)&jarg1;
  arg1 = (imimr::IImiColorSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->start();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiColorSensor_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiColorSensor *arg1 = (imimr::IImiColorSensor *) 0 ;
  std::shared_ptr< imimr::IImiColorSensor > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiColorSensor > **)&jarg1;
  arg1 = (imimr::IImiColorSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->stop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiColorSensor_1readFrame_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imimr::IImiColorSensor *arg1 = (imimr::IImiColorSensor *) 0 ;
  int arg2 ;
  std::shared_ptr< imimr::IImiColorSensor > *smartarg1 = 0 ;
  imimr::ImiBaseFrame result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiColorSensor > **)&jarg1;
  arg1 = (imimr::IImiColorSensor *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (arg1)->readFrame(arg2);
  *(imimr::ImiBaseFrame **)&jresult = result ? new imimr::ImiBaseFrame(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiColorSensor_1readFrame_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::IImiColorSensor *arg1 = (imimr::IImiColorSensor *) 0 ;
  std::shared_ptr< imimr::IImiColorSensor > *smartarg1 = 0 ;
  imimr::ImiBaseFrame result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiColorSensor > **)&jarg1;
  arg1 = (imimr::IImiColorSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->readFrame();
  *(imimr::ImiBaseFrame **)&jresult = result ? new imimr::ImiBaseFrame(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IImiDepthSensor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::IImiBaseDevice *arg1 = (imimr::IImiBaseDevice *) 0 ;
  std::shared_ptr< imimr::IImiBaseDevice > *smartarg1 = 0 ;
  imimr::IImiDepthSensor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseDevice > **)&jarg1;
  arg1 = (imimr::IImiBaseDevice *)(smartarg1 ? smartarg1->get() : 0); 
  result = (imimr::IImiDepthSensor *)new imimr::IImiDepthSensor(arg1);
  
  *(std::shared_ptr<  imimr::IImiDepthSensor > **)&jresult = result ? new std::shared_ptr<  imimr::IImiDepthSensor >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IImiDepthSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IImiDepthSensor *arg1 = (imimr::IImiDepthSensor *) 0 ;
  std::shared_ptr< imimr::IImiDepthSensor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiDepthSensor > **)&jarg1;
  arg1 = (imimr::IImiDepthSensor *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiDepthSensor_1asMe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBaseSensor *arg1 = 0 ;
  imimr::ImiBaseSensor tempnull1 ;
  imimr::ImiDepthSensor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(imimr::ImiBaseSensor **)&jarg1 : &tempnull1; 
  result = imimr::IImiDepthSensor::asMe((std::shared_ptr< imimr::IImiBaseSensor > const &)*arg1);
  *(imimr::ImiDepthSensor **)&jresult = result ? new imimr::ImiDepthSensor(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiDepthSensor_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::IImiDepthSensor *arg1 = (imimr::IImiDepthSensor *) 0 ;
  std::shared_ptr< imimr::IImiDepthSensor const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiDepthSensor > **)&jarg1;
  arg1 = (imimr::IImiDepthSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((imimr::IImiDepthSensor const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IImiDepthFrame(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::IImiDepthFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::IImiDepthFrame *)new imimr::IImiDepthFrame();
  
  *(std::shared_ptr<  imimr::IImiDepthFrame > **)&jresult = result ? new std::shared_ptr<  imimr::IImiDepthFrame >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IImiDepthFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IImiDepthFrame *arg1 = (imimr::IImiDepthFrame *) 0 ;
  std::shared_ptr< imimr::IImiDepthFrame > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiDepthFrame > **)&jarg1;
  arg1 = (imimr::IImiDepthFrame *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiDepthFrame_1asMe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBaseFrame *arg1 = 0 ;
  imimr::ImiBaseFrame tempnull1 ;
  imimr::ImiDepthFrame result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(imimr::ImiBaseFrame **)&jarg1 : &tempnull1; 
  result = imimr::IImiDepthFrame::asMe((std::shared_ptr< imimr::IImiBaseFrame > const &)*arg1);
  *(imimr::ImiDepthFrame **)&jresult = result ? new imimr::ImiDepthFrame(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiDepthFrame_1getRgbData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean _arg2, jobject jarg2) {
  imimr::IImiDepthFrame *arg1 = (imimr::IImiDepthFrame *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  std::shared_ptr< imimr::IImiDepthFrame const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiDepthFrame > **)&jarg1;
  arg1 = (imimr::IImiDepthFrame *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if(_arg2){
      void *data =  jenv->GetDirectBufferAddress(jarg2);
      //LOGIS("ptr=",data)
      jobject obj = jarg2;
      size_t _len = jenv->GetDirectBufferCapacity(jarg2);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }else{
      jobject obj = jarg2;
      jbyteArray aa = (jbyteArray) jarg2;
      void *data = jenv->GetByteArrayElements(aa, 0);
      size_t _len = jenv->GetArrayLength(aa);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }
  }
  ((imimr::IImiDepthFrame const *)arg1)->getRgbData(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IImiIRSensor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::IImiBaseDevice *arg1 = (imimr::IImiBaseDevice *) 0 ;
  std::shared_ptr< imimr::IImiBaseDevice > *smartarg1 = 0 ;
  imimr::IImiIRSensor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseDevice > **)&jarg1;
  arg1 = (imimr::IImiBaseDevice *)(smartarg1 ? smartarg1->get() : 0); 
  result = (imimr::IImiIRSensor *)new imimr::IImiIRSensor(arg1);
  
  *(std::shared_ptr<  imimr::IImiIRSensor > **)&jresult = result ? new std::shared_ptr<  imimr::IImiIRSensor >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IImiIRSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IImiIRSensor *arg1 = (imimr::IImiIRSensor *) 0 ;
  std::shared_ptr< imimr::IImiIRSensor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiIRSensor > **)&jarg1;
  arg1 = (imimr::IImiIRSensor *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiIRSensor_1asMe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBaseSensor *arg1 = 0 ;
  imimr::ImiBaseSensor tempnull1 ;
  imimr::ImiIRSensor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(imimr::ImiBaseSensor **)&jarg1 : &tempnull1; 
  result = imimr::IImiIRSensor::asMe((std::shared_ptr< imimr::IImiBaseSensor > const &)*arg1);
  *(imimr::ImiIRSensor **)&jresult = result ? new imimr::ImiIRSensor(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IImiIRFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IImiIRFrame *arg1 = (imimr::IImiIRFrame *) 0 ;
  std::shared_ptr< imimr::IImiIRFrame > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiIRFrame > **)&jarg1;
  arg1 = (imimr::IImiIRFrame *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiIRFrame_1asMe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBaseFrame *arg1 = 0 ;
  imimr::ImiBaseFrame tempnull1 ;
  imimr::ImiIRFrame result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(imimr::ImiBaseFrame **)&jarg1 : &tempnull1; 
  result = imimr::IImiIRFrame::asMe((std::shared_ptr< imimr::IImiBaseFrame > const &)*arg1);
  *(imimr::ImiIRFrame **)&jresult = result ? new imimr::ImiIRFrame(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiIRFrame_1getRgbData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean _arg2, jobject jarg2) {
  imimr::IImiIRFrame *arg1 = (imimr::IImiIRFrame *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  std::shared_ptr< imimr::IImiIRFrame const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiIRFrame > **)&jarg1;
  arg1 = (imimr::IImiIRFrame *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if(_arg2){
      void *data =  jenv->GetDirectBufferAddress(jarg2);
      //LOGIS("ptr=",data)
      jobject obj = jarg2;
      size_t _len = jenv->GetDirectBufferCapacity(jarg2);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }else{
      jobject obj = jarg2;
      jbyteArray aa = (jbyteArray) jarg2;
      void *data = jenv->GetByteArrayElements(aa, 0);
      size_t _len = jenv->GetArrayLength(aa);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }
  }
  ((imimr::IImiIRFrame const *)arg1)->getRgbData(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IImiUserTrackSensor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::IImiBaseDevice *arg1 = (imimr::IImiBaseDevice *) 0 ;
  std::shared_ptr< imimr::IImiBaseDevice > *smartarg1 = 0 ;
  imimr::IImiUserTrackSensor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseDevice > **)&jarg1;
  arg1 = (imimr::IImiBaseDevice *)(smartarg1 ? smartarg1->get() : 0); 
  result = (imimr::IImiUserTrackSensor *)new imimr::IImiUserTrackSensor(arg1);
  
  *(std::shared_ptr<  imimr::IImiUserTrackSensor > **)&jresult = result ? new std::shared_ptr<  imimr::IImiUserTrackSensor >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IImiUserTrackSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IImiUserTrackSensor *arg1 = (imimr::IImiUserTrackSensor *) 0 ;
  std::shared_ptr< imimr::IImiUserTrackSensor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiUserTrackSensor > **)&jarg1;
  arg1 = (imimr::IImiUserTrackSensor *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackSensor_1asMe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBaseSensor *arg1 = 0 ;
  imimr::ImiBaseSensor tempnull1 ;
  imimr::ImiUserTrackSensor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(imimr::ImiBaseSensor **)&jarg1 : &tempnull1; 
  result = imimr::IImiUserTrackSensor::asMe((std::shared_ptr< imimr::IImiBaseSensor > const &)*arg1);
  *(imimr::ImiUserTrackSensor **)&jresult = result ? new imimr::ImiUserTrackSensor(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackSensor_1start_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  imimr::IImiUserTrackSensor *arg1 = (imimr::IImiUserTrackSensor *) 0 ;
  int arg2 ;
  std::shared_ptr< imimr::IImiUserTrackSensor > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiUserTrackSensor > **)&jarg1;
  arg1 = (imimr::IImiUserTrackSensor *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->start(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackSensor_1start_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiUserTrackSensor *arg1 = (imimr::IImiUserTrackSensor *) 0 ;
  std::shared_ptr< imimr::IImiUserTrackSensor > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiUserTrackSensor > **)&jarg1;
  arg1 = (imimr::IImiUserTrackSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->start();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackSensor_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiUserTrackSensor *arg1 = (imimr::IImiUserTrackSensor *) 0 ;
  std::shared_ptr< imimr::IImiUserTrackSensor > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiUserTrackSensor > **)&jarg1;
  arg1 = (imimr::IImiUserTrackSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->stop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackSensor_1readFrame_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imimr::IImiUserTrackSensor *arg1 = (imimr::IImiUserTrackSensor *) 0 ;
  int arg2 ;
  std::shared_ptr< imimr::IImiUserTrackSensor > *smartarg1 = 0 ;
  imimr::ImiBaseFrame result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiUserTrackSensor > **)&jarg1;
  arg1 = (imimr::IImiUserTrackSensor *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (arg1)->readFrame(arg2);
  *(imimr::ImiBaseFrame **)&jresult = result ? new imimr::ImiBaseFrame(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackSensor_1readFrame_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::IImiUserTrackSensor *arg1 = (imimr::IImiUserTrackSensor *) 0 ;
  std::shared_ptr< imimr::IImiUserTrackSensor > *smartarg1 = 0 ;
  imimr::ImiBaseFrame result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiUserTrackSensor > **)&jarg1;
  arg1 = (imimr::IImiUserTrackSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->readFrame();
  *(imimr::ImiBaseFrame **)&jresult = result ? new imimr::ImiBaseFrame(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IImiUserTrackFrame(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  imimr::IImiUserTrackFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (imimr::IImiUserTrackFrame *)new imimr::IImiUserTrackFrame(arg1);
  
  *(std::shared_ptr<  imimr::IImiUserTrackFrame > **)&jresult = result ? new std::shared_ptr<  imimr::IImiUserTrackFrame >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IImiUserTrackFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IImiUserTrackFrame *arg1 = (imimr::IImiUserTrackFrame *) 0 ;
  std::shared_ptr< imimr::IImiUserTrackFrame > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiUserTrackFrame > **)&jarg1;
  arg1 = (imimr::IImiUserTrackFrame *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackFrame_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  imimr::IImiUserTrackFrame *arg1 = (imimr::IImiUserTrackFrame *) 0 ;
  std::shared_ptr< imimr::IImiUserTrackFrame > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiUserTrackFrame > **)&jarg1;
  arg1 = (imimr::IImiUserTrackFrame *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->release();
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackFrame_1asMe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBaseFrame *arg1 = 0 ;
  imimr::ImiBaseFrame tempnull1 ;
  imimr::ImiUserTrackFrame result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(imimr::ImiBaseFrame **)&jarg1 : &tempnull1; 
  result = imimr::IImiUserTrackFrame::asMe((std::shared_ptr< imimr::IImiBaseFrame > const &)*arg1);
  *(imimr::ImiUserTrackFrame **)&jresult = result ? new imimr::ImiUserTrackFrame(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackFrame_1getBodySkeleton_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::IImiUserTrackFrame *arg1 = (imimr::IImiUserTrackFrame *) 0 ;
  std::shared_ptr< imimr::IImiUserTrackFrame const > *smartarg1 = 0 ;
  imimr::ImiBodySkeleton result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiUserTrackFrame > **)&jarg1;
  arg1 = (imimr::IImiUserTrackFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((imimr::IImiUserTrackFrame const *)arg1)->getBodySkeleton();
  *(imimr::ImiBodySkeleton **)&jresult = new imimr::ImiBodySkeleton(result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackFrame_1getBodySkeleton_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  imimr::IImiUserTrackFrame *arg1 = (imimr::IImiUserTrackFrame *) 0 ;
  imimr::ImiBodySkeleton *arg2 = (imimr::ImiBodySkeleton *) 0 ;
  std::shared_ptr< imimr::IImiUserTrackFrame const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiUserTrackFrame > **)&jarg1;
  arg1 = (imimr::IImiUserTrackFrame *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(imimr::ImiBodySkeleton **)&jarg2; 
  result = (bool)((imimr::IImiUserTrackFrame const *)arg1)->getBodySkeleton(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackFrame_1getHandSkeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::IImiUserTrackFrame *arg1 = (imimr::IImiUserTrackFrame *) 0 ;
  std::shared_ptr< imimr::IImiUserTrackFrame const > *smartarg1 = 0 ;
  imimr::ImiHandSkeleton result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiUserTrackFrame > **)&jarg1;
  arg1 = (imimr::IImiUserTrackFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((imimr::IImiUserTrackFrame const *)arg1)->getHandSkeleton();
  *(imimr::ImiHandSkeleton **)&jresult = new imimr::ImiHandSkeleton(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackFrame_1getForegroundInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::IImiUserTrackFrame *arg1 = (imimr::IImiUserTrackFrame *) 0 ;
  std::shared_ptr< imimr::IImiUserTrackFrame const > *smartarg1 = 0 ;
  imimr::ImiForegroundData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiUserTrackFrame > **)&jarg1;
  arg1 = (imimr::IImiUserTrackFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((imimr::IImiUserTrackFrame const *)arg1)->getForegroundInfo();
  *(imimr::ImiForegroundData **)&jresult = new imimr::ImiForegroundData(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackFrame_1getForegroundData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean _arg2, jobject jarg2) {
  jint jresult = 0 ;
  imimr::IImiUserTrackFrame *arg1 = (imimr::IImiUserTrackFrame *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  std::shared_ptr< imimr::IImiUserTrackFrame const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiUserTrackFrame > **)&jarg1;
  arg1 = (imimr::IImiUserTrackFrame *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if(_arg2){
      void *data =  jenv->GetDirectBufferAddress(jarg2);
      //LOGIS("ptr=",data)
      jobject obj = jarg2;
      size_t _len = jenv->GetDirectBufferCapacity(jarg2);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }else{
      jobject obj = jarg2;
      jbyteArray aa = (jbyteArray) jarg2;
      void *data = jenv->GetByteArrayElements(aa, 0);
      size_t _len = jenv->GetArrayLength(aa);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }
  }
  result = (int)((imimr::IImiUserTrackFrame const *)arg1)->getForegroundData(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackFrame_1getMattingInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::IImiUserTrackFrame *arg1 = (imimr::IImiUserTrackFrame *) 0 ;
  std::shared_ptr< imimr::IImiUserTrackFrame const > *smartarg1 = 0 ;
  imimr::ImiMattingData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiUserTrackFrame > **)&jarg1;
  arg1 = (imimr::IImiUserTrackFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((imimr::IImiUserTrackFrame const *)arg1)->getMattingInfo();
  *(imimr::ImiMattingData **)&jresult = new imimr::ImiMattingData(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackFrame_1getMattingData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean _arg2, jobject jarg2) {
  imimr::IImiUserTrackFrame *arg1 = (imimr::IImiUserTrackFrame *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  std::shared_ptr< imimr::IImiUserTrackFrame const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiUserTrackFrame > **)&jarg1;
  arg1 = (imimr::IImiUserTrackFrame *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if(_arg2){
      void *data =  jenv->GetDirectBufferAddress(jarg2);
      //LOGIS("ptr=",data)
      jobject obj = jarg2;
      size_t _len = jenv->GetDirectBufferCapacity(jarg2);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }else{
      jobject obj = jarg2;
      jbyteArray aa = (jbyteArray) jarg2;
      void *data = jenv->GetByteArrayElements(aa, 0);
      size_t _len = jenv->GetArrayLength(aa);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }
  }
  ((imimr::IImiUserTrackFrame const *)arg1)->getMattingData(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackFrame_1getFaceFeatureFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::IImiUserTrackFrame *arg1 = (imimr::IImiUserTrackFrame *) 0 ;
  std::shared_ptr< imimr::IImiUserTrackFrame const > *smartarg1 = 0 ;
  imimr::ImiFaceFeatureData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiUserTrackFrame > **)&jarg1;
  arg1 = (imimr::IImiUserTrackFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((imimr::IImiUserTrackFrame const *)arg1)->getFaceFeatureFrame();
  *(imimr::ImiFaceFeatureData **)&jresult = new imimr::ImiFaceFeatureData(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackFrame_1getForegroundRgbData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean _arg2, jobject jarg2, jint jarg4) {
  jint jresult = 0 ;
  imimr::IImiUserTrackFrame *arg1 = (imimr::IImiUserTrackFrame *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  std::shared_ptr< imimr::IImiUserTrackFrame const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiUserTrackFrame > **)&jarg1;
  arg1 = (imimr::IImiUserTrackFrame *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if(_arg2){
      void *data =  jenv->GetDirectBufferAddress(jarg2);
      //LOGIS("ptr=",data)
      jobject obj = jarg2;
      size_t _len = jenv->GetDirectBufferCapacity(jarg2);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }else{
      jobject obj = jarg2;
      jbyteArray aa = (jbyteArray) jarg2;
      void *data = jenv->GetByteArrayElements(aa, 0);
      size_t _len = jenv->GetArrayLength(aa);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }
  }
  arg4 = (int)jarg4; 
  result = (int)((imimr::IImiUserTrackFrame const *)arg1)->getForegroundRgbData(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackFrame_1getForegroundArgbData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean _arg2, jobject jarg2, jint jarg4) {
  jint jresult = 0 ;
  imimr::IImiUserTrackFrame *arg1 = (imimr::IImiUserTrackFrame *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  std::shared_ptr< imimr::IImiUserTrackFrame const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiUserTrackFrame > **)&jarg1;
  arg1 = (imimr::IImiUserTrackFrame *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if(_arg2){
      void *data =  jenv->GetDirectBufferAddress(jarg2);
      //LOGIS("ptr=",data)
      jobject obj = jarg2;
      size_t _len = jenv->GetDirectBufferCapacity(jarg2);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }else{
      jobject obj = jarg2;
      jbyteArray aa = (jbyteArray) jarg2;
      void *data = jenv->GetByteArrayElements(aa, 0);
      size_t _len = jenv->GetArrayLength(aa);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }
  }
  arg4 = (int)jarg4; 
  result = (int)((imimr::IImiUserTrackFrame const *)arg1)->getForegroundArgbData(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackFrame_1getBodySkeletonData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean _arg2, jobject jarg2) {
  jint jresult = 0 ;
  imimr::IImiUserTrackFrame *arg1 = (imimr::IImiUserTrackFrame *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  std::shared_ptr< imimr::IImiUserTrackFrame const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiUserTrackFrame > **)&jarg1;
  arg1 = (imimr::IImiUserTrackFrame *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if(_arg2){
      void *data =  jenv->GetDirectBufferAddress(jarg2);
      //LOGIS("ptr=",data)
      jobject obj = jarg2;
      size_t _len = jenv->GetDirectBufferCapacity(jarg2);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }else{
      jobject obj = jarg2;
      jbyteArray aa = (jbyteArray) jarg2;
      void *data = jenv->GetByteArrayElements(aa, 0);
      size_t _len = jenv->GetArrayLength(aa);
      arg2 = (unsigned char *)data;
      arg3 = _len;
    }
  }
  result = (int)((imimr::IImiUserTrackFrame const *)arg1)->getBodySkeletonData(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IImiActionSensor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::IImiBaseDevice *arg1 = (imimr::IImiBaseDevice *) 0 ;
  std::shared_ptr< imimr::IImiBaseDevice > *smartarg1 = 0 ;
  imimr::IImiActionSensor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiBaseDevice > **)&jarg1;
  arg1 = (imimr::IImiBaseDevice *)(smartarg1 ? smartarg1->get() : 0); 
  result = (imimr::IImiActionSensor *)new imimr::IImiActionSensor(arg1);
  
  *(std::shared_ptr<  imimr::IImiActionSensor > **)&jresult = result ? new std::shared_ptr<  imimr::IImiActionSensor >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IImiActionSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IImiActionSensor *arg1 = (imimr::IImiActionSensor *) 0 ;
  std::shared_ptr< imimr::IImiActionSensor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiActionSensor > **)&jarg1;
  arg1 = (imimr::IImiActionSensor *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiActionSensor_1asMe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBaseSensor *arg1 = 0 ;
  imimr::ImiBaseSensor tempnull1 ;
  imimr::ImiActionSensor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(imimr::ImiBaseSensor **)&jarg1 : &tempnull1; 
  result = imimr::IImiActionSensor::asMe((std::shared_ptr< imimr::IImiBaseSensor > const &)*arg1);
  *(imimr::ImiActionSensor **)&jresult = result ? new imimr::ImiActionSensor(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiActionSensor_1onRunActionsData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  imimr::IImiActionSensor *arg1 = (imimr::IImiActionSensor *) 0 ;
  std::shared_ptr< imimr::IImiActionSensor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiActionSensor > **)&jarg1;
  arg1 = (imimr::IImiActionSensor *)(smartarg1 ? smartarg1->get() : 0); 
  imimr::IImiActionSensor::onRunActionsData(arg1);
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiActionSensor_1start_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  imimr::IImiActionSensor *arg1 = (imimr::IImiActionSensor *) 0 ;
  int arg2 ;
  std::shared_ptr< imimr::IImiActionSensor > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiActionSensor > **)&jarg1;
  arg1 = (imimr::IImiActionSensor *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->start(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiActionSensor_1start_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiActionSensor *arg1 = (imimr::IImiActionSensor *) 0 ;
  std::shared_ptr< imimr::IImiActionSensor > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiActionSensor > **)&jarg1;
  arg1 = (imimr::IImiActionSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->start();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiActionSensor_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IImiActionSensor *arg1 = (imimr::IImiActionSensor *) 0 ;
  std::shared_ptr< imimr::IImiActionSensor > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiActionSensor > **)&jarg1;
  arg1 = (imimr::IImiActionSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->stop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiActionSensor_1isStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imimr::IImiActionSensor *arg1 = (imimr::IImiActionSensor *) 0 ;
  std::shared_ptr< imimr::IImiActionSensor const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const imimr::IImiActionSensor > **)&jarg1;
  arg1 = (imimr::IImiActionSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((imimr::IImiActionSensor const *)arg1)->isStarted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiActionSensor_1readFrame_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imimr::IImiActionSensor *arg1 = (imimr::IImiActionSensor *) 0 ;
  int arg2 ;
  std::shared_ptr< imimr::IImiActionSensor > *smartarg1 = 0 ;
  imimr::ImiBaseFrame result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiActionSensor > **)&jarg1;
  arg1 = (imimr::IImiActionSensor *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (arg1)->readFrame(arg2);
  *(imimr::ImiBaseFrame **)&jresult = result ? new imimr::ImiBaseFrame(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiActionSensor_1readFrame_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::IImiActionSensor *arg1 = (imimr::IImiActionSensor *) 0 ;
  std::shared_ptr< imimr::IImiActionSensor > *smartarg1 = 0 ;
  imimr::ImiBaseFrame result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiActionSensor > **)&jarg1;
  arg1 = (imimr::IImiActionSensor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->readFrame();
  *(imimr::ImiBaseFrame **)&jresult = result ? new imimr::ImiBaseFrame(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IImiActionFrame(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::IImiActionFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::IImiActionFrame *)new imimr::IImiActionFrame();
  
  *(std::shared_ptr<  imimr::IImiActionFrame > **)&jresult = result ? new std::shared_ptr<  imimr::IImiActionFrame >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IImiActionFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IImiActionFrame *arg1 = (imimr::IImiActionFrame *) 0 ;
  std::shared_ptr< imimr::IImiActionFrame > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiActionFrame > **)&jarg1;
  arg1 = (imimr::IImiActionFrame *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiActionFrame_1asMe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBaseFrame *arg1 = 0 ;
  imimr::ImiBaseFrame tempnull1 ;
  imimr::ImiActionFrame result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(imimr::ImiBaseFrame **)&jarg1 : &tempnull1; 
  result = imimr::IImiActionFrame::asMe((std::shared_ptr< imimr::IImiBaseFrame > const &)*arg1);
  *(imimr::ImiActionFrame **)&jresult = result ? new imimr::ImiActionFrame(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiActionFrame_1getAccompanyFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::IImiActionFrame *arg1 = (imimr::IImiActionFrame *) 0 ;
  std::shared_ptr< imimr::IImiActionFrame > *smartarg1 = 0 ;
  imimr::ImiUserTrackFrame result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiActionFrame > **)&jarg1;
  arg1 = (imimr::IImiActionFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getAccompanyFrame();
  *(imimr::ImiUserTrackFrame **)&jresult = result ? new imimr::ImiUserTrackFrame(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiActionFrame_1getActionsData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::IImiActionFrame *arg1 = (imimr::IImiActionFrame *) 0 ;
  std::shared_ptr< imimr::IImiActionFrame > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  imimr::IImiActionFrame > **)&jarg1;
  arg1 = (imimr::IImiActionFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getActionsData();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_DataUtil_1createImiBodySkeleton(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeleton result;
  
  (void)jenv;
  (void)jcls;
  result = imimr::DataUtil::createImiBodySkeleton();
  *(imimr::ImiBodySkeleton **)&jresult = new imimr::ImiBodySkeleton(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1DataUtil(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::DataUtil *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::DataUtil *)new imimr::DataUtil();
  *(imimr::DataUtil **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1DataUtil(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::DataUtil *arg1 = (imimr::DataUtil *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::DataUtil **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IInt32Property_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::IBaseProperty< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::IBaseProperty< int > *)new imimr::IBaseProperty< int >();
  *(imimr::IBaseProperty< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IInt32Property_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  imimr::IBaseProperty< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (imimr::IBaseProperty< int > *)new imimr::IBaseProperty< int >(arg1);
  *(imimr::IBaseProperty< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IInt32Property(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IBaseProperty< int > *arg1 = (imimr::IBaseProperty< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::IBaseProperty< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IInt32Property_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::IBaseProperty< int > *arg1 = (imimr::IBaseProperty< int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IBaseProperty< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IInt32Property_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IBaseProperty< int > *arg1 = (imimr::IBaseProperty< int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IBaseProperty< int > **)&jarg1; 
  result = (int)((imimr::IBaseProperty< int > const *)arg1)->get();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IInt32Property_1dataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IBaseProperty< int > *arg1 = (imimr::IBaseProperty< int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IBaseProperty< int > **)&jarg1; 
  result = (int)((imimr::IBaseProperty< int > const *)arg1)->dataSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IInt16Property_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::IBaseProperty< short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::IBaseProperty< short > *)new imimr::IBaseProperty< short >();
  *(imimr::IBaseProperty< short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IInt16Property_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  short arg1 ;
  imimr::IBaseProperty< short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (short)jarg1; 
  result = (imimr::IBaseProperty< short > *)new imimr::IBaseProperty< short >(arg1);
  *(imimr::IBaseProperty< short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IInt16Property(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IBaseProperty< short > *arg1 = (imimr::IBaseProperty< short > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::IBaseProperty< short > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IInt16Property_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::IBaseProperty< short > *arg1 = (imimr::IBaseProperty< short > *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IBaseProperty< short > **)&jarg1; 
  arg2 = (short)jarg2; 
  (arg1)->set(arg2);
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IInt16Property_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::IBaseProperty< short > *arg1 = (imimr::IBaseProperty< short > *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IBaseProperty< short > **)&jarg1; 
  result = (short)((imimr::IBaseProperty< short > const *)arg1)->get();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IInt16Property_1dataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IBaseProperty< short > *arg1 = (imimr::IBaseProperty< short > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IBaseProperty< short > **)&jarg1; 
  result = (int)((imimr::IBaseProperty< short > const *)arg1)->dataSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IInt64Property_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::IBaseProperty< long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::IBaseProperty< long > *)new imimr::IBaseProperty< long >();
  *(imimr::IBaseProperty< long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IInt64Property_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  long arg1 ;
  imimr::IBaseProperty< long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  result = (imimr::IBaseProperty< long > *)new imimr::IBaseProperty< long >(arg1);
  *(imimr::IBaseProperty< long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IInt64Property(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IBaseProperty< long > *arg1 = (imimr::IBaseProperty< long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::IBaseProperty< long > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IInt64Property_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::IBaseProperty< long > *arg1 = (imimr::IBaseProperty< long > *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IBaseProperty< long > **)&jarg1; 
  arg2 = (long)jarg2; 
  (arg1)->set(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IInt64Property_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IBaseProperty< long > *arg1 = (imimr::IBaseProperty< long > *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IBaseProperty< long > **)&jarg1; 
  result = (long)((imimr::IBaseProperty< long > const *)arg1)->get();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IInt64Property_1dataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IBaseProperty< long > *arg1 = (imimr::IBaseProperty< long > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IBaseProperty< long > **)&jarg1; 
  result = (int)((imimr::IBaseProperty< long > const *)arg1)->dataSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IFloatProperty_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::IBaseProperty< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::IBaseProperty< float > *)new imimr::IBaseProperty< float >();
  *(imimr::IBaseProperty< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IFloatProperty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  imimr::IBaseProperty< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (imimr::IBaseProperty< float > *)new imimr::IBaseProperty< float >(arg1);
  *(imimr::IBaseProperty< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IFloatProperty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IBaseProperty< float > *arg1 = (imimr::IBaseProperty< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::IBaseProperty< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IFloatProperty_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::IBaseProperty< float > *arg1 = (imimr::IBaseProperty< float > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IBaseProperty< float > **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set(arg2);
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IFloatProperty_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::IBaseProperty< float > *arg1 = (imimr::IBaseProperty< float > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IBaseProperty< float > **)&jarg1; 
  result = (float)((imimr::IBaseProperty< float > const *)arg1)->get();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IFloatProperty_1dataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IBaseProperty< float > *arg1 = (imimr::IBaseProperty< float > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IBaseProperty< float > **)&jarg1; 
  result = (int)((imimr::IBaseProperty< float > const *)arg1)->dataSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IInt8Property_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::IBaseProperty< unsigned char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::IBaseProperty< unsigned char > *)new imimr::IBaseProperty< unsigned char >();
  *(imimr::IBaseProperty< unsigned char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IInt8Property_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  unsigned char arg1 ;
  imimr::IBaseProperty< unsigned char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  result = (imimr::IBaseProperty< unsigned char > *)new imimr::IBaseProperty< unsigned char >(arg1);
  *(imimr::IBaseProperty< unsigned char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IInt8Property(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IBaseProperty< unsigned char > *arg1 = (imimr::IBaseProperty< unsigned char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::IBaseProperty< unsigned char > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IInt8Property_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::IBaseProperty< unsigned char > *arg1 = (imimr::IBaseProperty< unsigned char > *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IBaseProperty< unsigned char > **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->set(arg2);
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IInt8Property_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::IBaseProperty< unsigned char > *arg1 = (imimr::IBaseProperty< unsigned char > *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IBaseProperty< unsigned char > **)&jarg1; 
  result = (unsigned char)((imimr::IBaseProperty< unsigned char > const *)arg1)->get();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IInt8Property_1dataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IBaseProperty< unsigned char > *arg1 = (imimr::IBaseProperty< unsigned char > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IBaseProperty< unsigned char > **)&jarg1; 
  result = (int)((imimr::IBaseProperty< unsigned char > const *)arg1)->dataSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IImiCameraIntrinsicProperty_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::IBaseProperty< imimr::ImiCameraIntrinsic > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::IBaseProperty< imimr::ImiCameraIntrinsic > *)new imimr::IBaseProperty< imimr::ImiCameraIntrinsic >();
  *(imimr::IBaseProperty< imimr::ImiCameraIntrinsic > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_new_1IImiCameraIntrinsicProperty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiCameraIntrinsic arg1 ;
  imimr::ImiCameraIntrinsic *argp1 ;
  imimr::IBaseProperty< imimr::ImiCameraIntrinsic > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null imimr::ImiCameraIntrinsic");
    return 0;
  }
  arg1 = *argp1; 
  result = (imimr::IBaseProperty< imimr::ImiCameraIntrinsic > *)new imimr::IBaseProperty< imimr::ImiCameraIntrinsic >(SWIG_STD_MOVE(arg1));
  *(imimr::IBaseProperty< imimr::ImiCameraIntrinsic > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_delete_1IImiCameraIntrinsicProperty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::IBaseProperty< imimr::ImiCameraIntrinsic > *arg1 = (imimr::IBaseProperty< imimr::ImiCameraIntrinsic > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::IBaseProperty< imimr::ImiCameraIntrinsic > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiCameraIntrinsicProperty_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::IBaseProperty< imimr::ImiCameraIntrinsic > *arg1 = (imimr::IBaseProperty< imimr::ImiCameraIntrinsic > *) 0 ;
  imimr::ImiCameraIntrinsic arg2 ;
  imimr::ImiCameraIntrinsic *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::IBaseProperty< imimr::ImiCameraIntrinsic > **)&jarg1; 
  argp2 = *(imimr::ImiCameraIntrinsic **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null imimr::ImiCameraIntrinsic");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiCameraIntrinsicProperty_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::IBaseProperty< imimr::ImiCameraIntrinsic > *arg1 = (imimr::IBaseProperty< imimr::ImiCameraIntrinsic > *) 0 ;
  imimr::ImiCameraIntrinsic result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IBaseProperty< imimr::ImiCameraIntrinsic > **)&jarg1; 
  result = ((imimr::IBaseProperty< imimr::ImiCameraIntrinsic > const *)arg1)->get();
  *(imimr::ImiCameraIntrinsic **)&jresult = new imimr::ImiCameraIntrinsic(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiCameraIntrinsicProperty_1dataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::IBaseProperty< imimr::ImiCameraIntrinsic > *arg1 = (imimr::IBaseProperty< imimr::ImiCameraIntrinsic > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::IBaseProperty< imimr::ImiCameraIntrinsic > **)&jarg1; 
  result = (int)((imimr::IBaseProperty< imimr::ImiCameraIntrinsic > const *)arg1)->dataSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiImageFrame_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< imimr::IImiImageFrame > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< imimr::IImiImageFrame > **)&jarg1;
    *(std::shared_ptr< imimr::IImiBaseFrame > **)&baseptr = argp1 ? new std::shared_ptr< imimr::IImiBaseFrame >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiColorFrame_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< imimr::IImiColorFrame > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< imimr::IImiColorFrame > **)&jarg1;
    *(std::shared_ptr< imimr::IImiImageFrame > **)&baseptr = argp1 ? new std::shared_ptr< imimr::IImiImageFrame >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiColorSensor_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< imimr::IImiColorSensor > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< imimr::IImiColorSensor > **)&jarg1;
    *(std::shared_ptr< imimr::IImiBaseSensor > **)&baseptr = argp1 ? new std::shared_ptr< imimr::IImiBaseSensor >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiDepthSensor_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< imimr::IImiDepthSensor > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< imimr::IImiDepthSensor > **)&jarg1;
    *(std::shared_ptr< imimr::IImiBaseSensor > **)&baseptr = argp1 ? new std::shared_ptr< imimr::IImiBaseSensor >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiDepthFrame_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< imimr::IImiDepthFrame > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< imimr::IImiDepthFrame > **)&jarg1;
    *(std::shared_ptr< imimr::IImiImageFrame > **)&baseptr = argp1 ? new std::shared_ptr< imimr::IImiImageFrame >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiIRSensor_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< imimr::IImiIRSensor > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< imimr::IImiIRSensor > **)&jarg1;
    *(std::shared_ptr< imimr::IImiBaseSensor > **)&baseptr = argp1 ? new std::shared_ptr< imimr::IImiBaseSensor >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiIRFrame_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< imimr::IImiIRFrame > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< imimr::IImiIRFrame > **)&jarg1;
    *(std::shared_ptr< imimr::IImiImageFrame > **)&baseptr = argp1 ? new std::shared_ptr< imimr::IImiImageFrame >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackSensor_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< imimr::IImiUserTrackSensor > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< imimr::IImiUserTrackSensor > **)&jarg1;
    *(std::shared_ptr< imimr::IImiBaseSensor > **)&baseptr = argp1 ? new std::shared_ptr< imimr::IImiBaseSensor >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiUserTrackFrame_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< imimr::IImiUserTrackFrame > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< imimr::IImiUserTrackFrame > **)&jarg1;
    *(std::shared_ptr< imimr::IImiBaseFrame > **)&baseptr = argp1 ? new std::shared_ptr< imimr::IImiBaseFrame >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiActionSensor_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< imimr::IImiActionSensor > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< imimr::IImiActionSensor > **)&jarg1;
    *(std::shared_ptr< imimr::IImiUserTrackSensor > **)&baseptr = argp1 ? new std::shared_ptr< imimr::IImiUserTrackSensor >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiActionFrame_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< imimr::IImiActionFrame > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< imimr::IImiActionFrame > **)&jarg1;
    *(std::shared_ptr< imimr::IImiBaseFrame > **)&baseptr = argp1 ? new std::shared_ptr< imimr::IImiBaseFrame >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IInt32Property_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imimr::IImiDeviceProperty **)&baseptr = *(imimr::IBaseProperty< int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IInt16Property_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imimr::IImiDeviceProperty **)&baseptr = *(imimr::IBaseProperty< short > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IInt64Property_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imimr::IImiDeviceProperty **)&baseptr = *(imimr::IBaseProperty< long > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IFloatProperty_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imimr::IImiDeviceProperty **)&baseptr = *(imimr::IBaseProperty< float > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IInt8Property_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imimr::IImiDeviceProperty **)&baseptr = *(imimr::IBaseProperty< unsigned char > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1javaJNI_IImiCameraIntrinsicProperty_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imimr::IImiDeviceProperty **)&baseptr = *(imimr::IBaseProperty< imimr::ImiCameraIntrinsic > **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1javaJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[1] = {
    {
      "SwigDirector_MrAgentExceptionHandler_onExceptionHandle", "(Lcom/sximi/mragent/MrAgentExceptionHandler;I)V" 
    }
  };
  Swig::jclass_mragent_javaJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_mragent_javaJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

// JNI C++ init code

// JNIEXPORT jlong JNICALL Java_com_sximi_mr_AndroidAppContext_getSwigCPtr(JNIEnv *env, jobject obj) {
//     jclass clazz = env->FindClass("com/sximi/mr/AppContext");
//     jfieldID fieldID = env->GetFieldID(clazz, "swigCPtr", "J");
//     return env->GetLongField(obj, fieldID);
// }


