/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040300
#define SWIGJAVA
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION) || defined(DEBUG_DIRECTOR_THREAD_NAME)
#include <iostream>
#endif

#include <exception>

#if defined(SWIG_JAVA_USE_THREAD_NAME)

#if !defined(SWIG_JAVA_GET_THREAD_NAME)
namespace Swig {
  SWIGINTERN int GetThreadName(char *name, size_t len);
}

#if defined(__linux__)

#include <sys/prctl.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
#if defined(PR_GET_NAME)
  return prctl(PR_GET_NAME, (unsigned long)name, 0, 0, 0);
#else
  (void)name;
  return 1;
#endif
}

#elif defined(__unix__) || defined(__APPLE__)

#include <pthread.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  return pthread_getname_np(pthread_self(), name, len);
}

#else

SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
  (void)name;
  return 1;
}
#endif

#endif

#endif

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
#include <pthread.h>
#endif

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(SWIG_NULLPTR), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = SWIG_NULLPTR;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, SWIG_NULLPTR) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = SWIG_NULLPTR;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
    static void detach(void *jvm) {
      static_cast<JavaVM *>(jvm)->DetachCurrentThread();
    }

    static void make_detach_key() {
      pthread_key_create(&detach_key_, detach);
    }

    /* thread-local key to register a destructor */
    static pthread_key_t detach_key_;
#endif

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
  pthread_key_t JObjectWrapper::detach_key_;
#endif

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(SWIG_NULLPTR), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_2;
        args.group = SWIG_NULLPTR;
        args.name = SWIG_NULLPTR;
#if defined(SWIG_JAVA_USE_THREAD_NAME)
        char thread_name[64];  // MAX_TASK_COMM_LEN=16 is hard-coded in the Linux kernel and MacOS has MAXTHREADNAMESIZE=64.
        if (Swig::GetThreadName(thread_name, sizeof(thread_name)) == 0) {
          args.name = thread_name;
#if defined(DEBUG_DIRECTOR_THREAD_NAME)
          std::cout << "JNIEnvWrapper: thread name: " << thread_name << std::endl;
        } else {
          std::cout << "JNIEnvWrapper: Couldn't set Java thread name" << std::endl;
#endif
        }
#endif
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, &args);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, &args);
#endif

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
        // At least on Android 6, detaching after every call causes a memory leak.
        // Instead, register a thread desructor and detach only when the thread ends.
        // See https://developer.android.com/training/articles/perf-jni#threads
        static pthread_once_t once = PTHREAD_ONCE_INIT;

        pthread_once(&once, JObjectWrapper::make_detach_key);
        pthread_setspecific(JObjectWrapper::detach_key_, director->swig_jvm_);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_DETACH_ON_THREAD_END) && !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    struct SwigDirectorMethod {
      const char *name;
      const char *desc;
      jmethodID methid;
      SwigDirectorMethod(JNIEnv *jenv, jclass baseclass, const char *name, const char *desc) : name(name), desc(desc) {
        methid = jenv->GetMethodID(baseclass, name, desc);
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, SWIG_NULLPTR) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

    jclass swig_new_global_ref(JNIEnv *jenv, const char *classname) {
      jclass clz = jenv->FindClass(classname);
      return clz ? (jclass)jenv->NewGlobalRef(clz) : SWIG_NULLPTR;
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) SWIG_NULLPTR), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(SWIG_NULLPTR) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, SWIG_NULLPTR);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = SWIG_NULLPTR;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == SWIG_NULLPTR && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(SWIG_NULLPTR), msg_(SWIG_NULLPTR) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(SWIG_NULLPTR);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(SWIG_NULLPTR));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(SWIG_NULLPTR), throwable_(SWIG_NULLPTR), classname_(SWIG_NULLPTR), msg_(msg ? copystr(msg) : SWIG_NULLPTR) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = SWIG_NULLPTR;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = SWIG_NULLPTR;
          jclass throwableclass = SWIG_NULLPTR;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = SWIG_NULLPTR;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif



#include <string>

#include <stdint.h>

#include "ImiMrTypes.h"



#include <string>


#include <typeinfo>
#include <stdexcept>


#include <map>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, long long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, long long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, long long *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long long[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, long long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, long long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, long long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< imimr::ImiFaceDetectData > *new_std_vector_Sl_imimr_ImiFaceDetectData_Sg___SWIG_2(jint count,imimr::ImiFaceDetectData const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< imimr::ImiFaceDetectData >(static_cast<std::vector< imimr::ImiFaceDetectData >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_imimr_ImiFaceDetectData_Sg__doCapacity(std::vector< imimr::ImiFaceDetectData > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_imimr_ImiFaceDetectData_Sg__doReserve(std::vector< imimr::ImiFaceDetectData > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_imimr_ImiFaceDetectData_Sg__doSize(std::vector< imimr::ImiFaceDetectData > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_imimr_ImiFaceDetectData_Sg__doAdd__SWIG_0(std::vector< imimr::ImiFaceDetectData > *self,std::vector< imimr::ImiFaceDetectData >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_imimr_ImiFaceDetectData_Sg__doAdd__SWIG_1(std::vector< imimr::ImiFaceDetectData > *self,jint index,std::vector< imimr::ImiFaceDetectData >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< imimr::ImiFaceDetectData >::value_type std_vector_Sl_imimr_ImiFaceDetectData_Sg__doRemove(std::vector< imimr::ImiFaceDetectData > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          imimr::ImiFaceDetectData const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< imimr::ImiFaceDetectData >::value_type const &std_vector_Sl_imimr_ImiFaceDetectData_Sg__doGet(std::vector< imimr::ImiFaceDetectData > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< imimr::ImiFaceDetectData >::value_type std_vector_Sl_imimr_ImiFaceDetectData_Sg__doSet(std::vector< imimr::ImiFaceDetectData > *self,jint index,std::vector< imimr::ImiFaceDetectData >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          imimr::ImiFaceDetectData const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_imimr_ImiFaceDetectData_Sg__doRemoveRange(std::vector< imimr::ImiFaceDetectData > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

#include <string.h>

SWIGINTERN imimr::ImiBodySkeletonData const *imimr_ImiBodySkeleton_at(imimr::ImiBodySkeleton *self,int index){
        if(index<0) index = 0;
        if(index>5) index = 5;
        return &self->skeletonDatas[index];

    }
SWIGINTERN imimr::ImiBodySkeletonData const *imimr_ImiBodySkeleton_atBodySkeleton(imimr::ImiBodySkeleton *self,int index){
        return & self->skeletonDatas[index];
    }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "mragent_data_java.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiFaceDetectDataList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< imimr::ImiFaceDetectData > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< imimr::ImiFaceDetectData > *)new std::vector< imimr::ImiFaceDetectData >();
  *(std::vector< imimr::ImiFaceDetectData > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiFaceDetectDataList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< imimr::ImiFaceDetectData > *arg1 = 0 ;
  std::vector< imimr::ImiFaceDetectData > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imimr::ImiFaceDetectData > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< imimr::ImiFaceDetectData > const & is null");
    return 0;
  } 
  result = (std::vector< imimr::ImiFaceDetectData > *)new std::vector< imimr::ImiFaceDetectData >((std::vector< imimr::ImiFaceDetectData > const &)*arg1);
  *(std::vector< imimr::ImiFaceDetectData > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectDataList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< imimr::ImiFaceDetectData > *arg1 = (std::vector< imimr::ImiFaceDetectData > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imimr::ImiFaceDetectData > **)&jarg1; 
  result = (bool)((std::vector< imimr::ImiFaceDetectData > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectDataList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< imimr::ImiFaceDetectData > *arg1 = (std::vector< imimr::ImiFaceDetectData > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imimr::ImiFaceDetectData > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiFaceDetectDataList_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  imimr::ImiFaceDetectData *arg2 = 0 ;
  std::vector< imimr::ImiFaceDetectData > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(imimr::ImiFaceDetectData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imimr::ImiFaceDetectData const & is null");
    return 0;
  } 
  try {
    result = (std::vector< imimr::ImiFaceDetectData > *)new_std_vector_Sl_imimr_ImiFaceDetectData_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(imimr::ImiFaceDetectData const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< imimr::ImiFaceDetectData > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectDataList_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< imimr::ImiFaceDetectData > *arg1 = (std::vector< imimr::ImiFaceDetectData > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imimr::ImiFaceDetectData > **)&jarg1; 
  try {
    result = std_vector_Sl_imimr_ImiFaceDetectData_Sg__doCapacity(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectDataList_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< imimr::ImiFaceDetectData > *arg1 = (std::vector< imimr::ImiFaceDetectData > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imimr::ImiFaceDetectData > **)&jarg1; 
  arg2 = jarg2; 
  try {
    std_vector_Sl_imimr_ImiFaceDetectData_Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectDataList_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< imimr::ImiFaceDetectData > *arg1 = (std::vector< imimr::ImiFaceDetectData > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imimr::ImiFaceDetectData > **)&jarg1; 
  try {
    result = std_vector_Sl_imimr_ImiFaceDetectData_Sg__doSize((std::vector< imimr::ImiFaceDetectData > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectDataList_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< imimr::ImiFaceDetectData > *arg1 = (std::vector< imimr::ImiFaceDetectData > *) 0 ;
  std::vector< imimr::ImiFaceDetectData >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< imimr::ImiFaceDetectData > **)&jarg1; 
  arg2 = *(std::vector< imimr::ImiFaceDetectData >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< imimr::ImiFaceDetectData >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_imimr_ImiFaceDetectData_Sg__doAdd__SWIG_0(arg1,(imimr::ImiFaceDetectData const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectDataList_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< imimr::ImiFaceDetectData > *arg1 = (std::vector< imimr::ImiFaceDetectData > *) 0 ;
  jint arg2 ;
  std::vector< imimr::ImiFaceDetectData >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< imimr::ImiFaceDetectData > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< imimr::ImiFaceDetectData >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< imimr::ImiFaceDetectData >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_imimr_ImiFaceDetectData_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(imimr::ImiFaceDetectData const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectDataList_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< imimr::ImiFaceDetectData > *arg1 = (std::vector< imimr::ImiFaceDetectData > *) 0 ;
  jint arg2 ;
  std::vector< imimr::ImiFaceDetectData >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imimr::ImiFaceDetectData > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_imimr_ImiFaceDetectData_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< imimr::ImiFaceDetectData >::value_type **)&jresult = new std::vector< imimr::ImiFaceDetectData >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectDataList_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< imimr::ImiFaceDetectData > *arg1 = (std::vector< imimr::ImiFaceDetectData > *) 0 ;
  jint arg2 ;
  std::vector< imimr::ImiFaceDetectData >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imimr::ImiFaceDetectData > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< imimr::ImiFaceDetectData >::value_type *) &std_vector_Sl_imimr_ImiFaceDetectData_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< imimr::ImiFaceDetectData >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectDataList_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< imimr::ImiFaceDetectData > *arg1 = (std::vector< imimr::ImiFaceDetectData > *) 0 ;
  jint arg2 ;
  std::vector< imimr::ImiFaceDetectData >::value_type *arg3 = 0 ;
  std::vector< imimr::ImiFaceDetectData >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< imimr::ImiFaceDetectData > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< imimr::ImiFaceDetectData >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< imimr::ImiFaceDetectData >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_imimr_ImiFaceDetectData_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(imimr::ImiFaceDetectData const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< imimr::ImiFaceDetectData >::value_type **)&jresult = new std::vector< imimr::ImiFaceDetectData >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectDataList_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< imimr::ImiFaceDetectData > *arg1 = (std::vector< imimr::ImiFaceDetectData > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imimr::ImiFaceDetectData > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_imimr_ImiFaceDetectData_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiFaceDetectDataList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< imimr::ImiFaceDetectData > *arg1 = (std::vector< imimr::ImiFaceDetectData > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< imimr::ImiFaceDetectData > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiData_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImiData *arg1 = (ImiData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImiData **)&jarg1; 
  result = (bool)((ImiData const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiData_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImiData *arg1 = (ImiData *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImiData **)&jarg1; 
  result = (void *)((ImiData const *)arg1)->getHandle();
  {
    jresult = (jlong)result;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImiData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImiData *)new ImiData();
  *(ImiData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImiData *arg1 = (ImiData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImiData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1sdk_1version_1major_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiVersions::imi_sdk_version *arg1 = (imimr::ImiVersions::imi_sdk_version *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_sdk_version **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->major = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1sdk_1version_1major_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiVersions::imi_sdk_version *arg1 = (imimr::ImiVersions::imi_sdk_version *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_sdk_version **)&jarg1; 
  result = (uint8_t) ((arg1)->major);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1sdk_1version_1minor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiVersions::imi_sdk_version *arg1 = (imimr::ImiVersions::imi_sdk_version *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_sdk_version **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->minor = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1sdk_1version_1minor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiVersions::imi_sdk_version *arg1 = (imimr::ImiVersions::imi_sdk_version *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_sdk_version **)&jarg1; 
  result = (uint8_t) ((arg1)->minor);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1sdk_1version_1revision_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imimr::ImiVersions::imi_sdk_version *arg1 = (imimr::ImiVersions::imi_sdk_version *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_sdk_version **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->revision = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1sdk_1version_1revision_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiVersions::imi_sdk_version *arg1 = (imimr::ImiVersions::imi_sdk_version *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_sdk_version **)&jarg1; 
  result =  ((arg1)->revision);
  *(uint16_t **)&jresult = new uint16_t(result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1sdk_1version_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiVersions::imi_sdk_version *arg1 = (imimr::ImiVersions::imi_sdk_version *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_sdk_version **)&jarg1; 
  result = ((imimr::ImiVersions::imi_sdk_version const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiVersions_1imi_1sdk_1version(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiVersions::imi_sdk_version *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiVersions::imi_sdk_version *)new imimr::ImiVersions::imi_sdk_version();
  *(imimr::ImiVersions::imi_sdk_version **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiVersions_1imi_1sdk_1version(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiVersions::imi_sdk_version *arg1 = (imimr::ImiVersions::imi_sdk_version *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiVersions::imi_sdk_version **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1fw_1version_1major_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiVersions::imi_fw_version *arg1 = (imimr::ImiVersions::imi_fw_version *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_fw_version **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->major = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1fw_1version_1major_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiVersions::imi_fw_version *arg1 = (imimr::ImiVersions::imi_fw_version *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_fw_version **)&jarg1; 
  result = (uint8_t) ((arg1)->major);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1fw_1version_1minor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiVersions::imi_fw_version *arg1 = (imimr::ImiVersions::imi_fw_version *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_fw_version **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->minor = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1fw_1version_1minor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiVersions::imi_fw_version *arg1 = (imimr::ImiVersions::imi_fw_version *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_fw_version **)&jarg1; 
  result = (uint8_t) ((arg1)->minor);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1fw_1version_1revision_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imimr::ImiVersions::imi_fw_version *arg1 = (imimr::ImiVersions::imi_fw_version *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_fw_version **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->revision = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1fw_1version_1revision_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiVersions::imi_fw_version *arg1 = (imimr::ImiVersions::imi_fw_version *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_fw_version **)&jarg1; 
  result =  ((arg1)->revision);
  *(uint16_t **)&jresult = new uint16_t(result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1fw_1version_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiVersions::imi_fw_version *arg1 = (imimr::ImiVersions::imi_fw_version *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_fw_version **)&jarg1; 
  result = ((imimr::ImiVersions::imi_fw_version const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiVersions_1imi_1fw_1version(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiVersions::imi_fw_version *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiVersions::imi_fw_version *)new imimr::ImiVersions::imi_fw_version();
  *(imimr::ImiVersions::imi_fw_version **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiVersions_1imi_1fw_1version(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiVersions::imi_fw_version *arg1 = (imimr::ImiVersions::imi_fw_version *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiVersions::imi_fw_version **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1hw_1version_1hardware_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiVersions::imi_hw_version *arg1 = (imimr::ImiVersions::imi_hw_version *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_hw_version **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->hardware = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1hw_1version_1hardware_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiVersions::imi_hw_version *arg1 = (imimr::ImiVersions::imi_hw_version *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_hw_version **)&jarg1; 
  result = (uint8_t) ((arg1)->hardware);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1hw_1version_1chip_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiVersions::imi_hw_version *arg1 = (imimr::ImiVersions::imi_hw_version *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_hw_version **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->chip = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1hw_1version_1chip_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiVersions::imi_hw_version *arg1 = (imimr::ImiVersions::imi_hw_version *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_hw_version **)&jarg1; 
  result = (uint8_t) ((arg1)->chip);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1hw_1version_1ap_1hardware_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiVersions::imi_hw_version *arg1 = (imimr::ImiVersions::imi_hw_version *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_hw_version **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ap_hardware = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1hw_1version_1ap_1hardware_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiVersions::imi_hw_version *arg1 = (imimr::ImiVersions::imi_hw_version *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_hw_version **)&jarg1; 
  result = (uint8_t) ((arg1)->ap_hardware);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1hw_1version_1ext_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiVersions::imi_hw_version *arg1 = (imimr::ImiVersions::imi_hw_version *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_hw_version **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ext = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1hw_1version_1ext_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiVersions::imi_hw_version *arg1 = (imimr::ImiVersions::imi_hw_version *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_hw_version **)&jarg1; 
  result = (uint8_t) ((arg1)->ext);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1imi_1hw_1version_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiVersions::imi_hw_version *arg1 = (imimr::ImiVersions::imi_hw_version *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions::imi_hw_version **)&jarg1; 
  result = ((imimr::ImiVersions::imi_hw_version const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiVersions_1imi_1hw_1version(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiVersions::imi_hw_version *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiVersions::imi_hw_version *)new imimr::ImiVersions::imi_hw_version();
  *(imimr::ImiVersions::imi_hw_version **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiVersions_1imi_1hw_1version(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiVersions::imi_hw_version *arg1 = (imimr::ImiVersions::imi_hw_version *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiVersions::imi_hw_version **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1sdkVersion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiVersions *arg1 = (imimr::ImiVersions *) 0 ;
  imimr::ImiVersions::imi_sdk_version *arg2 = (imimr::ImiVersions::imi_sdk_version *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiVersions **)&jarg1; 
  arg2 = *(imimr::ImiVersions::imi_sdk_version **)&jarg2; 
  if (arg1) (arg1)->sdkVersion = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1sdkVersion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiVersions *arg1 = (imimr::ImiVersions *) 0 ;
  imimr::ImiVersions::imi_sdk_version *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions **)&jarg1; 
  result = (imimr::ImiVersions::imi_sdk_version *)& ((arg1)->sdkVersion);
  *(imimr::ImiVersions::imi_sdk_version **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1fwVersion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiVersions *arg1 = (imimr::ImiVersions *) 0 ;
  imimr::ImiVersions::imi_fw_version *arg2 = (imimr::ImiVersions::imi_fw_version *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiVersions **)&jarg1; 
  arg2 = *(imimr::ImiVersions::imi_fw_version **)&jarg2; 
  if (arg1) (arg1)->fwVersion = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1fwVersion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiVersions *arg1 = (imimr::ImiVersions *) 0 ;
  imimr::ImiVersions::imi_fw_version *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions **)&jarg1; 
  result = (imimr::ImiVersions::imi_fw_version *)& ((arg1)->fwVersion);
  *(imimr::ImiVersions::imi_fw_version **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1hwVersion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiVersions *arg1 = (imimr::ImiVersions *) 0 ;
  imimr::ImiVersions::imi_hw_version *arg2 = (imimr::ImiVersions::imi_hw_version *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiVersions **)&jarg1; 
  arg2 = *(imimr::ImiVersions::imi_hw_version **)&jarg2; 
  if (arg1) (arg1)->hwVersion = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1hwVersion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiVersions *arg1 = (imimr::ImiVersions *) 0 ;
  imimr::ImiVersions::imi_hw_version *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions **)&jarg1; 
  result = (imimr::ImiVersions::imi_hw_version *)& ((arg1)->hwVersion);
  *(imimr::ImiVersions::imi_hw_version **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1uvc_1color_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  imimr::ImiVersions *arg1 = (imimr::ImiVersions *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->uvc_color_version, (const char *)arg2, 64-1);
      arg1->uvc_color_version[64-1] = 0;
    } else {
      arg1->uvc_color_version[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1uvc_1color_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiVersions *arg1 = (imimr::ImiVersions *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions **)&jarg1; 
  result = (char *)(char *) ((arg1)->uvc_color_version);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1bridge_1fw_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  imimr::ImiVersions *arg1 = (imimr::ImiVersions *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->bridge_fw_version, (const char *)arg2, 64-1);
      arg1->bridge_fw_version[64-1] = 0;
    } else {
      arg1->bridge_fw_version[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1bridge_1fw_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiVersions *arg1 = (imimr::ImiVersions *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions **)&jarg1; 
  result = (char *)(char *) ((arg1)->bridge_fw_version);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiVersions *arg1 = (imimr::ImiVersions *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVersions **)&jarg1; 
  result = ((imimr::ImiVersions const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiVersions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiVersions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiVersions *)new imimr::ImiVersions();
  *(imimr::ImiVersions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiVersions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiVersions *arg1 = (imimr::ImiVersions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiVersions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiDeviceAttribute_1vendorId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiDeviceAttribute *arg1 = (imimr::ImiDeviceAttribute *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiDeviceAttribute **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->vendorId = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiDeviceAttribute_1vendorId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiDeviceAttribute *arg1 = (imimr::ImiDeviceAttribute *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiDeviceAttribute **)&jarg1; 
  result = (int) ((arg1)->vendorId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiDeviceAttribute_1productId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiDeviceAttribute *arg1 = (imimr::ImiDeviceAttribute *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiDeviceAttribute **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->productId = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiDeviceAttribute_1productId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiDeviceAttribute *arg1 = (imimr::ImiDeviceAttribute *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiDeviceAttribute **)&jarg1; 
  result = (int) ((arg1)->productId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiDeviceAttribute_1uri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  imimr::ImiDeviceAttribute *arg1 = (imimr::ImiDeviceAttribute *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiDeviceAttribute **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->uri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiDeviceAttribute_1uri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiDeviceAttribute *arg1 = (imimr::ImiDeviceAttribute *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiDeviceAttribute **)&jarg1; 
  result = (std::string *) & ((arg1)->uri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiDeviceAttribute_1enableUVC_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  imimr::ImiDeviceAttribute *arg1 = (imimr::ImiDeviceAttribute *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiDeviceAttribute **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enableUVC = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiDeviceAttribute_1enableUVC_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imimr::ImiDeviceAttribute *arg1 = (imimr::ImiDeviceAttribute *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiDeviceAttribute **)&jarg1; 
  result = (bool) ((arg1)->enableUVC);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiDeviceAttribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  std::string arg3 ;
  bool arg4 ;
  imimr::ImiDeviceAttribute *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = (imimr::ImiDeviceAttribute *)new imimr::ImiDeviceAttribute(arg1,arg2,SWIG_STD_MOVE(arg3),arg4);
  *(imimr::ImiDeviceAttribute **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiDeviceAttribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  std::string arg3 ;
  imimr::ImiDeviceAttribute *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (imimr::ImiDeviceAttribute *)new imimr::ImiDeviceAttribute(arg1,arg2,SWIG_STD_MOVE(arg3));
  *(imimr::ImiDeviceAttribute **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiDeviceAttribute_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  imimr::ImiDeviceAttribute *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (imimr::ImiDeviceAttribute *)new imimr::ImiDeviceAttribute(arg1,arg2);
  *(imimr::ImiDeviceAttribute **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiDeviceAttribute_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  imimr::ImiDeviceAttribute *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (imimr::ImiDeviceAttribute *)new imimr::ImiDeviceAttribute(arg1);
  *(imimr::ImiDeviceAttribute **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiDeviceAttribute_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiDeviceAttribute *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiDeviceAttribute *)new imimr::ImiDeviceAttribute();
  *(imimr::ImiDeviceAttribute **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiDeviceAttribute_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiDeviceAttribute *arg1 = (imimr::ImiDeviceAttribute *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiDeviceAttribute **)&jarg1; 
  result = ((imimr::ImiDeviceAttribute const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiDeviceAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiDeviceAttribute *arg1 = (imimr::ImiDeviceAttribute *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiDeviceAttribute **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1fxParam_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fxParam = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1fxParam_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  result = (float) ((arg1)->fxParam);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1fyParam_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fyParam = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1fyParam_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  result = (float) ((arg1)->fyParam);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1cxParam_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->cxParam = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1cxParam_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  result = (float) ((arg1)->cxParam);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1cyParam_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->cyParam = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1cyParam_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  result = (float) ((arg1)->cyParam);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1k1Param_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->k1Param = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1k1Param_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  result = (float) ((arg1)->k1Param);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1k2Param_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->k2Param = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1k2Param_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  result = (float) ((arg1)->k2Param);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1k3Param_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->k3Param = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1k3Param_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  result = (float) ((arg1)->k3Param);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1p1Param_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->p1Param = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1p1Param_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  result = (float) ((arg1)->p1Param);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1p2Param_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->p2Param = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1p2Param_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  result = (float) ((arg1)->p2Param);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiCameraIntrinsic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  imimr::ImiCameraIntrinsic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (imimr::ImiCameraIntrinsic *)new imimr::ImiCameraIntrinsic(arg1,arg2,arg3,arg4);
  *(imimr::ImiCameraIntrinsic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiCameraIntrinsic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  imimr::ImiCameraIntrinsic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (imimr::ImiCameraIntrinsic *)new imimr::ImiCameraIntrinsic(arg1,arg2,arg3);
  *(imimr::ImiCameraIntrinsic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiCameraIntrinsic_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  imimr::ImiCameraIntrinsic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (imimr::ImiCameraIntrinsic *)new imimr::ImiCameraIntrinsic(arg1,arg2);
  *(imimr::ImiCameraIntrinsic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiCameraIntrinsic_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  imimr::ImiCameraIntrinsic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (imimr::ImiCameraIntrinsic *)new imimr::ImiCameraIntrinsic(arg1);
  *(imimr::ImiCameraIntrinsic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiCameraIntrinsic_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiCameraIntrinsic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiCameraIntrinsic *)new imimr::ImiCameraIntrinsic();
  *(imimr::ImiCameraIntrinsic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  result = ((imimr::ImiCameraIntrinsic const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiCameraIntrinsic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiCameraIntrinsic *arg1 = (imimr::ImiCameraIntrinsic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiCameraIntrinsic **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiRect_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiRect *arg1 = (imimr::ImiRect *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiRect **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiRect_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiRect *arg1 = (imimr::ImiRect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiRect **)&jarg1; 
  result = (int) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiRect_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiRect *arg1 = (imimr::ImiRect *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiRect **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiRect_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiRect *arg1 = (imimr::ImiRect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiRect **)&jarg1; 
  result = (int) ((arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiRect_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiRect *arg1 = (imimr::ImiRect *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiRect **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiRect_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiRect *arg1 = (imimr::ImiRect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiRect **)&jarg1; 
  result = (int) ((arg1)->width);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiRect_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiRect *arg1 = (imimr::ImiRect *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiRect **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiRect_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiRect *arg1 = (imimr::ImiRect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiRect **)&jarg1; 
  result = (int) ((arg1)->height);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiRect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  imimr::ImiRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (imimr::ImiRect *)new imimr::ImiRect(arg1,arg2,arg3,arg4);
  *(imimr::ImiRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiRect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  imimr::ImiRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (imimr::ImiRect *)new imimr::ImiRect(arg1,arg2,arg3);
  *(imimr::ImiRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiRect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  imimr::ImiRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (imimr::ImiRect *)new imimr::ImiRect(arg1,arg2);
  *(imimr::ImiRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiRect_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  imimr::ImiRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (imimr::ImiRect *)new imimr::ImiRect(arg1);
  *(imimr::ImiRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiRect_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiRect *)new imimr::ImiRect();
  *(imimr::ImiRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiRect_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiRect *arg1 = (imimr::ImiRect *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiRect **)&jarg1; 
  result = ((imimr::ImiRect const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiRect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiRect *arg1 = (imimr::ImiRect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiRect **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiPoint2D_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiPoint2D *arg1 = (imimr::ImiPoint2D *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiPoint2D **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiPoint2D_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiPoint2D *arg1 = (imimr::ImiPoint2D *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiPoint2D **)&jarg1; 
  result = (int) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiPoint2D_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiPoint2D *arg1 = (imimr::ImiPoint2D *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiPoint2D **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiPoint2D_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiPoint2D *arg1 = (imimr::ImiPoint2D *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiPoint2D **)&jarg1; 
  result = (int) ((arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiPoint2D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  imimr::ImiPoint2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (imimr::ImiPoint2D *)new imimr::ImiPoint2D(arg1,arg2);
  *(imimr::ImiPoint2D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiPoint2D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  imimr::ImiPoint2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (imimr::ImiPoint2D *)new imimr::ImiPoint2D(arg1);
  *(imimr::ImiPoint2D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiPoint2D_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiPoint2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiPoint2D *)new imimr::ImiPoint2D();
  *(imimr::ImiPoint2D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiPoint2D_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiPoint2D *arg1 = (imimr::ImiPoint2D *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiPoint2D **)&jarg1; 
  result = ((imimr::ImiPoint2D const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiPoint2D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiPoint2D *arg1 = (imimr::ImiPoint2D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiPoint2D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiFaceDetectData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiFaceDetectData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiFaceDetectData *)new imimr::ImiFaceDetectData();
  *(imimr::ImiFaceDetectData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1rect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  imimr::ImiRect *arg2 = (imimr::ImiRect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = *(imimr::ImiRect **)&jarg2; 
  if (arg1) (arg1)->rect = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1rect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  imimr::ImiRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (imimr::ImiRect *)& ((arg1)->rect);
  *(imimr::ImiRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1landmark_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  imimr::ImiPoint2D *arg2 = (imimr::ImiPoint2D *) (imimr::ImiPoint2D *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  {
    // in;
  }
  {
    // typemap(memberin)
    int n = 5;
    size_t n1 = jenv->GetArrayLength(jarg2);
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiPoint2D");
    // 获取名字为name的静态成员方法的ID，其中sig为类型签名
    jmethodID meth = jenv->GetStaticMethodID(clazz, "getCPtr", "(L"  "com/sximi/mragent/ImiPoint2D"  ";)J");
    for(int i=0; i<n && i<n1; i++){
      jobject oo = jenv->GetObjectArrayElement(jarg2, i);
      imimr::ImiPoint2D* ptr = (imimr::ImiPoint2D*) jenv->CallStaticLongMethod(clazz, meth, oo);
      arg1->landmark[i] = *(ptr);
    }
  }
  
}


SWIGEXPORT jobjectArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1landmark_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  imimr::ImiPoint2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (imimr::ImiPoint2D *)(imimr::ImiPoint2D *) ((arg1)->landmark);
  {
    int n = 5;
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiPoint2D");
    if(clazz==0){
      return 0;
    }
    jmethodID meth = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
    if(meth==0){
      return 0;
    }
    jobjectArray res = jenv->NewObjectArray(n, clazz, NULL);
    for(int i=0; i<n; i++){
      imimr::ImiPoint2D* ptr = new imimr::ImiPoint2D(result[i]); 
      jobject oo = jenv->NewObject(clazz, meth, (jlong)ptr, (jboolean)true); 
      //printf("ptr=%x, oo=%x\n", ptr, oo);
      jenv->SetObjectArrayElement(res, i, oo);
    }
    jresult = res;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1depth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->depth = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1depth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (float) ((arg1)->depth);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1depthLivenessScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->depthLivenessScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1depthLivenessScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (float) ((arg1)->depthLivenessScore);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1irLivenessScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->irLivenessScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1irLivenessScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (float) ((arg1)->irLivenessScore);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1livenessScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->livenessScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1livenessScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (float) ((arg1)->livenessScore);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1blur_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->blur = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1blur_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (uint8_t) ((arg1)->blur);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1light_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->light = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1light_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (uint8_t) ((arg1)->light);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1cover_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->cover = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1cover_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (uint8_t) ((arg1)->cover);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1angle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->angle = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1angle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (uint8_t) ((arg1)->angle);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1eyeDistanceStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->eyeDistanceStatus = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1eyeDistanceStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (uint8_t) ((arg1)->eyeDistanceStatus);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1expression_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->expression = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1expression_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (uint8_t) ((arg1)->expression);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1moreFace_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->moreFace = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1moreFace_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (uint8_t) ((arg1)->moreFace);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1openMouth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->openMouth = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1openMouth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (uint8_t) ((arg1)->openMouth);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1closeEye_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->closeEye = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1closeEye_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (uint8_t) ((arg1)->closeEye);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1ok_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ok = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1ok_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (uint8_t) ((arg1)->ok);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1eyeDistance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->eyeDistance = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1eyeDistance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (float) ((arg1)->eyeDistance);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1roll_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->roll = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1roll_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (float) ((arg1)->roll);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1pitch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->pitch = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1pitch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (float) ((arg1)->pitch);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1yaw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yaw = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1yaw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (float) ((arg1)->yaw);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1qualityScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->qualityScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1qualityScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = (float) ((arg1)->qualityScore);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  result = ((imimr::ImiFaceDetectData const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiFaceDetectData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiFaceDetectData *arg1 = (imimr::ImiFaceDetectData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiFaceDetectData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_LogConfig_1pOutputDir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  imimr::LogConfig *arg1 = (imimr::LogConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::LogConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->pOutputDir = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_LogConfig_1pOutputDir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::LogConfig *arg1 = (imimr::LogConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::LogConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->pOutputDir);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_LogConfig_1level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imimr::LogConfig *arg1 = (imimr::LogConfig *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::LogConfig **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->level = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_LogConfig_1level_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::LogConfig *arg1 = (imimr::LogConfig *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::LogConfig **)&jarg1; 
  result = (uint32_t) ((arg1)->level);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_LogConfig_1bConsole_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  imimr::LogConfig *arg1 = (imimr::LogConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::LogConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bConsole = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_LogConfig_1bConsole_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imimr::LogConfig *arg1 = (imimr::LogConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::LogConfig **)&jarg1; 
  result = (bool) ((arg1)->bConsole);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_LogConfig_1bFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  imimr::LogConfig *arg1 = (imimr::LogConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::LogConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bFile = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_LogConfig_1bFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imimr::LogConfig *arg1 = (imimr::LogConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::LogConfig **)&jarg1; 
  result = (bool) ((arg1)->bFile);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1LogConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::LogConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::LogConfig *)new imimr::LogConfig();
  *(imimr::LogConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1LogConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::LogConfig *arg1 = (imimr::LogConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::LogConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4I_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiVector4I *arg1 = (imimr::ImiVector4I *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4I **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4I_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiVector4I *arg1 = (imimr::ImiVector4I *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4I **)&jarg1; 
  result = (int32_t) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4I_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiVector4I *arg1 = (imimr::ImiVector4I *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4I **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4I_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiVector4I *arg1 = (imimr::ImiVector4I *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4I **)&jarg1; 
  result = (int32_t) ((arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4I_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiVector4I *arg1 = (imimr::ImiVector4I *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4I **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4I_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiVector4I *arg1 = (imimr::ImiVector4I *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4I **)&jarg1; 
  result = (int32_t) ((arg1)->z);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4I_1w_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiVector4I *arg1 = (imimr::ImiVector4I *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4I **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4I_1w_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiVector4I *arg1 = (imimr::ImiVector4I *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4I **)&jarg1; 
  result = (int32_t) ((arg1)->w);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiVector4I_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiVector4I *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiVector4I *)new imimr::ImiVector4I();
  *(imimr::ImiVector4I **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiVector4I_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int32_t arg1 ;
  int32_t arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  imimr::ImiVector4I *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  result = (imimr::ImiVector4I *)new imimr::ImiVector4I(arg1,arg2,arg3,arg4);
  *(imimr::ImiVector4I **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiVector4I_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int32_t arg1 ;
  int32_t arg2 ;
  int32_t arg3 ;
  imimr::ImiVector4I *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  result = (imimr::ImiVector4I *)new imimr::ImiVector4I(arg1,arg2,arg3);
  *(imimr::ImiVector4I **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4I_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiVector4I *arg1 = (imimr::ImiVector4I *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4I **)&jarg1; 
  result = ((imimr::ImiVector4I const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiVector4I(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiVector4I *arg1 = (imimr::ImiVector4I *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiVector4I **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiVector4 *arg1 = (imimr::ImiVector4 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiVector4 *arg1 = (imimr::ImiVector4 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4 **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiVector4 *arg1 = (imimr::ImiVector4 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiVector4 *arg1 = (imimr::ImiVector4 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4 **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiVector4 *arg1 = (imimr::ImiVector4 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiVector4 *arg1 = (imimr::ImiVector4 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4 **)&jarg1; 
  result = (float) ((arg1)->z);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4_1w_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiVector4 *arg1 = (imimr::ImiVector4 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4_1w_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiVector4 *arg1 = (imimr::ImiVector4 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4 **)&jarg1; 
  result = (float) ((arg1)->w);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiVector4 *arg1 = (imimr::ImiVector4 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiVector4 **)&jarg1; 
  result = ((imimr::ImiVector4 const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiVector4(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiVector4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiVector4 *)new imimr::ImiVector4();
  *(imimr::ImiVector4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiVector4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiVector4 *arg1 = (imimr::ImiVector4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiVector4 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMat3f_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  imimr::ImiMat3f *arg1 = (imimr::ImiMat3f *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMat3f **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->data;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMat3f_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  imimr::ImiMat3f *arg1 = (imimr::ImiMat3f *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMat3f **)&jarg1; 
  result = (float *)(float *) ((arg1)->data);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, 9); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMat3f_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiMat3f *arg1 = (imimr::ImiMat3f *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMat3f **)&jarg1; 
  result = ((imimr::ImiMat3f const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiMat3f(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiMat3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiMat3f *)new imimr::ImiMat3f();
  *(imimr::ImiMat3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiMat3f(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiMat3f *arg1 = (imimr::ImiMat3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiMat3f **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMat4f_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  imimr::ImiMat4f *arg1 = (imimr::ImiMat4f *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMat4f **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 16) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->data;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMat4f_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  imimr::ImiMat4f *arg1 = (imimr::ImiMat4f *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMat4f **)&jarg1; 
  result = (float *)(float *) ((arg1)->data);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, 16); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMat4f_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiMat4f *arg1 = (imimr::ImiMat4f *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMat4f **)&jarg1; 
  result = ((imimr::ImiMat4f const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiMat4f(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiMat4f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiMat4f *)new imimr::ImiMat4f();
  *(imimr::ImiMat4f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiMat4f(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiMat4f *arg1 = (imimr::ImiMat4f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiMat4f **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceFeatureVec_1faceFeatures_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  imimr::ImiFaceFeatureVec *arg1 = (imimr::ImiFaceFeatureVec *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceFeatureVec **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 256) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->faceFeatures;
    for (ii = 0; ii < (size_t)256; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceFeatureVec_1faceFeatures_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  imimr::ImiFaceFeatureVec *arg1 = (imimr::ImiFaceFeatureVec *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceFeatureVec **)&jarg1; 
  result = (float *)(float *) ((arg1)->faceFeatures);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, 256); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceFeatureVec_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiFaceFeatureVec *arg1 = (imimr::ImiFaceFeatureVec *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceFeatureVec **)&jarg1; 
  result = ((imimr::ImiFaceFeatureVec const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiFaceFeatureVec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiFaceFeatureVec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiFaceFeatureVec *)new imimr::ImiFaceFeatureVec();
  *(imimr::ImiFaceFeatureVec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiFaceFeatureVec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiFaceFeatureVec *arg1 = (imimr::ImiFaceFeatureVec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiFaceFeatureVec **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiSkeletonOrientationData_1hierarchicalRotation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiSkeletonOrientationData *arg1 = (imimr::ImiSkeletonOrientationData *) 0 ;
  imimr::ImiMat3f *arg2 = (imimr::ImiMat3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiSkeletonOrientationData **)&jarg1; 
  arg2 = *(imimr::ImiMat3f **)&jarg2; 
  if (arg1) (arg1)->hierarchicalRotation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiSkeletonOrientationData_1hierarchicalRotation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiSkeletonOrientationData *arg1 = (imimr::ImiSkeletonOrientationData *) 0 ;
  imimr::ImiMat3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiSkeletonOrientationData **)&jarg1; 
  result = (imimr::ImiMat3f *)& ((arg1)->hierarchicalRotation);
  *(imimr::ImiMat3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiSkeletonOrientationData_1absoluteRotation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiSkeletonOrientationData *arg1 = (imimr::ImiSkeletonOrientationData *) 0 ;
  imimr::ImiMat3f *arg2 = (imimr::ImiMat3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiSkeletonOrientationData **)&jarg1; 
  arg2 = *(imimr::ImiMat3f **)&jarg2; 
  if (arg1) (arg1)->absoluteRotation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiSkeletonOrientationData_1absoluteRotation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiSkeletonOrientationData *arg1 = (imimr::ImiSkeletonOrientationData *) 0 ;
  imimr::ImiMat3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiSkeletonOrientationData **)&jarg1; 
  result = (imimr::ImiMat3f *)& ((arg1)->absoluteRotation);
  *(imimr::ImiMat3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiSkeletonOrientationData_1eulerAngles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiSkeletonOrientationData *arg1 = (imimr::ImiSkeletonOrientationData *) 0 ;
  imimr::ImiVector4 *arg2 = (imimr::ImiVector4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiSkeletonOrientationData **)&jarg1; 
  arg2 = *(imimr::ImiVector4 **)&jarg2; 
  if (arg1) (arg1)->eulerAngles = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiSkeletonOrientationData_1eulerAngles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiSkeletonOrientationData *arg1 = (imimr::ImiSkeletonOrientationData *) 0 ;
  imimr::ImiVector4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiSkeletonOrientationData **)&jarg1; 
  result = (imimr::ImiVector4 *)& ((arg1)->eulerAngles);
  *(imimr::ImiVector4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiSkeletonOrientationData_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiSkeletonOrientationData *arg1 = (imimr::ImiSkeletonOrientationData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiSkeletonOrientationData **)&jarg1; 
  result = ((imimr::ImiSkeletonOrientationData const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiSkeletonOrientationData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiSkeletonOrientationData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiSkeletonOrientationData *)new imimr::ImiSkeletonOrientationData();
  *(imimr::ImiSkeletonOrientationData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiSkeletonOrientationData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiSkeletonOrientationData *arg1 = (imimr::ImiSkeletonOrientationData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiSkeletonOrientationData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1IMI_1Rect_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiBodySkeletonData::IMI_Rect *arg1 = (imimr::ImiBodySkeletonData::IMI_Rect *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::IMI_Rect **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1IMI_1Rect_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiBodySkeletonData::IMI_Rect *arg1 = (imimr::ImiBodySkeletonData::IMI_Rect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::IMI_Rect **)&jarg1; 
  result = (int) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1IMI_1Rect_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiBodySkeletonData::IMI_Rect *arg1 = (imimr::ImiBodySkeletonData::IMI_Rect *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::IMI_Rect **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1IMI_1Rect_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiBodySkeletonData::IMI_Rect *arg1 = (imimr::ImiBodySkeletonData::IMI_Rect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::IMI_Rect **)&jarg1; 
  result = (int) ((arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1IMI_1Rect_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiBodySkeletonData::IMI_Rect *arg1 = (imimr::ImiBodySkeletonData::IMI_Rect *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::IMI_Rect **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1IMI_1Rect_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiBodySkeletonData::IMI_Rect *arg1 = (imimr::ImiBodySkeletonData::IMI_Rect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::IMI_Rect **)&jarg1; 
  result = (int) ((arg1)->width);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1IMI_1Rect_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiBodySkeletonData::IMI_Rect *arg1 = (imimr::ImiBodySkeletonData::IMI_Rect *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::IMI_Rect **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1IMI_1Rect_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiBodySkeletonData::IMI_Rect *arg1 = (imimr::ImiBodySkeletonData::IMI_Rect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::IMI_Rect **)&jarg1; 
  result = (int) ((arg1)->height);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiBodySkeletonData_1IMI_1Rect(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData::IMI_Rect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiBodySkeletonData::IMI_Rect *)new imimr::ImiBodySkeletonData::IMI_Rect();
  *(imimr::ImiBodySkeletonData::IMI_Rect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiBodySkeletonData_1IMI_1Rect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiBodySkeletonData::IMI_Rect *arg1 = (imimr::ImiBodySkeletonData::IMI_Rect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiBodySkeletonData::IMI_Rect **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFaceFeature_1faceRect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiBodySkeletonData::ImiFaceFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFaceFeature *) 0 ;
  imimr::ImiBodySkeletonData::IMI_Rect *arg2 = (imimr::ImiBodySkeletonData::IMI_Rect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jarg1; 
  arg2 = *(imimr::ImiBodySkeletonData::IMI_Rect **)&jarg2; 
  if (arg1) (arg1)->faceRect = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFaceFeature_1faceRect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData::ImiFaceFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFaceFeature *) 0 ;
  imimr::ImiBodySkeletonData::IMI_Rect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jarg1; 
  result = (imimr::ImiBodySkeletonData::IMI_Rect *)& ((arg1)->faceRect);
  *(imimr::ImiBodySkeletonData::IMI_Rect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFaceFeature_1faceSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imimr::ImiBodySkeletonData::ImiFaceFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFaceFeature *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->faceSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFaceFeature_1faceSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData::ImiFaceFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFaceFeature *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jarg1; 
  result = (uint32_t) ((arg1)->faceSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFaceFeature_1faceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imimr::ImiBodySkeletonData::ImiFaceFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFaceFeature *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->faceID = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFaceFeature_1faceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData::ImiFaceFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFaceFeature *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jarg1; 
  result = (uint32_t) ((arg1)->faceID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFaceFeature_1age_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imimr::ImiBodySkeletonData::ImiFaceFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFaceFeature *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->age = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFaceFeature_1age_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData::ImiFaceFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFaceFeature *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jarg1; 
  result = (uint32_t) ((arg1)->age);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFaceFeature_1gender_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imimr::ImiBodySkeletonData::ImiFaceFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFaceFeature *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->gender = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFaceFeature_1gender_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData::ImiFaceFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFaceFeature *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jarg1; 
  result = (uint32_t) ((arg1)->gender);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFaceFeature_1confiendence_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imimr::ImiBodySkeletonData::ImiFaceFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFaceFeature *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->confiendence = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFaceFeature_1confiendence_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData::ImiFaceFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFaceFeature *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jarg1; 
  result = (uint32_t) ((arg1)->confiendence);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFaceFeature_1faceFeatures_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  imimr::ImiBodySkeletonData::ImiFaceFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFaceFeature *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 512) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->faceFeatures;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFaceFeature_1faceFeatures_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  imimr::ImiBodySkeletonData::ImiFaceFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFaceFeature *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jarg1; 
  result = (float *)(float *) ((arg1)->faceFeatures);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, 512); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiBodySkeletonData_1ImiFaceFeature(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData::ImiFaceFeature *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiBodySkeletonData::ImiFaceFeature *)new imimr::ImiBodySkeletonData::ImiFaceFeature();
  *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiBodySkeletonData_1ImiFaceFeature(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiBodySkeletonData::ImiFaceFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFaceFeature *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiClothesFeature_1clothesFeatures_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  imimr::ImiBodySkeletonData::ImiClothesFeature *arg1 = (imimr::ImiBodySkeletonData::ImiClothesFeature *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiClothesFeature **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 128) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->clothesFeatures;
    for (ii = 0; ii < (size_t)128; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiClothesFeature_1clothesFeatures_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  imimr::ImiBodySkeletonData::ImiClothesFeature *arg1 = (imimr::ImiBodySkeletonData::ImiClothesFeature *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiClothesFeature **)&jarg1; 
  result = (float *)(float *) ((arg1)->clothesFeatures);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, 128); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiBodySkeletonData_1ImiClothesFeature(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData::ImiClothesFeature *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiBodySkeletonData::ImiClothesFeature *)new imimr::ImiBodySkeletonData::ImiClothesFeature();
  *(imimr::ImiBodySkeletonData::ImiClothesFeature **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiBodySkeletonData_1ImiClothesFeature(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiBodySkeletonData::ImiClothesFeature *arg1 = (imimr::ImiBodySkeletonData::ImiClothesFeature *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiBodySkeletonData::ImiClothesFeature **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFeature_1faceFeatureFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiBodySkeletonData::ImiFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFeature *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFeature **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->faceFeatureFlags = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFeature_1faceFeatureFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiBodySkeletonData::ImiFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFeature *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFeature **)&jarg1; 
  result = (uint8_t) ((arg1)->faceFeatureFlags);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFeature_1clothesFeatureFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiBodySkeletonData::ImiFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFeature *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFeature **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->clothesFeatureFlags = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFeature_1clothesFeatureFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiBodySkeletonData::ImiFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFeature *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFeature **)&jarg1; 
  result = (uint8_t) ((arg1)->clothesFeatureFlags);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFeature_1rev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  imimr::ImiBodySkeletonData::ImiFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFeature *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFeature **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->rev;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFeature_1rev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  imimr::ImiBodySkeletonData::ImiFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFeature *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFeature **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->rev);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 2); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFeature_1faceFeature_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiBodySkeletonData::ImiFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFeature *) 0 ;
  imimr::ImiBodySkeletonData::ImiFaceFeature *arg2 = (imimr::ImiBodySkeletonData::ImiFaceFeature *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFeature **)&jarg1; 
  arg2 = *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jarg2; 
  if (arg1) (arg1)->faceFeature = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFeature_1faceFeature_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData::ImiFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFeature *) 0 ;
  imimr::ImiBodySkeletonData::ImiFaceFeature *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFeature **)&jarg1; 
  result = (imimr::ImiBodySkeletonData::ImiFaceFeature *)& ((arg1)->faceFeature);
  *(imimr::ImiBodySkeletonData::ImiFaceFeature **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFeature_1clothesFeature_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiBodySkeletonData::ImiFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFeature *) 0 ;
  imimr::ImiBodySkeletonData::ImiClothesFeature *arg2 = (imimr::ImiBodySkeletonData::ImiClothesFeature *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFeature **)&jarg1; 
  arg2 = *(imimr::ImiBodySkeletonData::ImiClothesFeature **)&jarg2; 
  if (arg1) (arg1)->clothesFeature = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1ImiFeature_1clothesFeature_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData::ImiFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFeature *) 0 ;
  imimr::ImiBodySkeletonData::ImiClothesFeature *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFeature **)&jarg1; 
  result = (imimr::ImiBodySkeletonData::ImiClothesFeature *)& ((arg1)->clothesFeature);
  *(imimr::ImiBodySkeletonData::ImiClothesFeature **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiBodySkeletonData_1ImiFeature(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData::ImiFeature *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiBodySkeletonData::ImiFeature *)new imimr::ImiBodySkeletonData::ImiFeature();
  *(imimr::ImiBodySkeletonData::ImiFeature **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiBodySkeletonData_1ImiFeature(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiBodySkeletonData::ImiFeature *arg1 = (imimr::ImiBodySkeletonData::ImiFeature *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiBodySkeletonData::ImiFeature **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1trackingState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiSkeletonTrackState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  arg2 = (imimr::ImiSkeletonTrackState)jarg2; 
  if (arg1) (arg1)->trackingState = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1trackingState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiSkeletonTrackState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  result = (imimr::ImiSkeletonTrackState) ((arg1)->trackingState);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1trackingID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->trackingID = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1trackingID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  result = (uint32_t) ((arg1)->trackingID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1centerPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiVector4 *arg2 = (imimr::ImiVector4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  arg2 = *(imimr::ImiVector4 **)&jarg2; 
  if (arg1) (arg1)->centerPosition = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1centerPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiVector4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  result = (imimr::ImiVector4 *)& ((arg1)->centerPosition);
  *(imimr::ImiVector4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1skeletonPositions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiVector4 *arg2 = (imimr::ImiVector4 *) (imimr::ImiVector4 *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  {
    // in;
  }
  {
    // typemap(memberin)
    int n = 20;
    size_t n1 = jenv->GetArrayLength(jarg2);
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiVector4");
    // 获取名字为name的静态成员方法的ID，其中sig为类型签名
    jmethodID meth = jenv->GetStaticMethodID(clazz, "getCPtr", "(L"  "com/sximi/mragent/ImiVector4"  ";)J");
    for(int i=0; i<n && i<n1; i++){
      jobject oo = jenv->GetObjectArrayElement(jarg2, i);
      imimr::ImiVector4* ptr = (imimr::ImiVector4*) jenv->CallStaticLongMethod(clazz, meth, oo);
      arg1->skeletonPositions[i] = *(ptr);
    }
  }
  
}


SWIGEXPORT jobjectArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1skeletonPositions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiVector4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  result = (imimr::ImiVector4 *)(imimr::ImiVector4 *) ((arg1)->skeletonPositions);
  {
    int n = 20;
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiVector4");
    if(clazz==0){
      return 0;
    }
    jmethodID meth = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
    if(meth==0){
      return 0;
    }
    jobjectArray res = jenv->NewObjectArray(n, clazz, NULL);
    for(int i=0; i<n; i++){
      imimr::ImiVector4* ptr = new imimr::ImiVector4(result[i]); 
      jobject oo = jenv->NewObject(clazz, meth, (jlong)ptr, (jboolean)true); 
      //printf("ptr=%x, oo=%x\n", ptr, oo);
      jenv->SetObjectArrayElement(res, i, oo);
    }
    jresult = res;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1skeletonPositionTrackingStates_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiBodySkeletonData::ImiBodySkeletonPositionTrackState *arg2 = (imimr::ImiBodySkeletonData::ImiBodySkeletonPositionTrackState *) (imimr::ImiBodySkeletonData::ImiBodySkeletonPositionTrackState *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  {
    // in;
  }
  {
    // typemap(memberin)
    int len = jenv->GetArrayLength(jarg2);
    int n = (20<len) ? 20 : len;
    imimr::ImiBodySkeletonData::ImiBodySkeletonPositionTrackState* src = (imimr::ImiBodySkeletonData::ImiBodySkeletonPositionTrackState *) jenv->GetIntArrayElements(jarg2, 0);
    imimr::ImiBodySkeletonData::ImiBodySkeletonPositionTrackState* dst = arg1->skeletonPositionTrackingStates;
    for(int i=0;i<n;i++, dst++, src++){
      *dst = *src;
    }
  }
  
}


SWIGEXPORT jintArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1skeletonPositionTrackingStates_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiBodySkeletonData::ImiBodySkeletonPositionTrackState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  result = (imimr::ImiBodySkeletonData::ImiBodySkeletonPositionTrackState *)(imimr::ImiBodySkeletonData::ImiBodySkeletonPositionTrackState *) ((arg1)->skeletonPositionTrackingStates);
  {
    int n = 20;
    jintArray res = jenv->NewIntArray(n);
    jenv->SetIntArrayRegion(res, 0, n, ( jint *) result);
    jresult = res;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1qualityFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->qualityFlags = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1qualityFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  result = (uint32_t) ((arg1)->qualityFlags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1upSkeletonsOrientationState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiBodySkeletonData::ImiSkeletonOrientationState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  arg2 = (imimr::ImiBodySkeletonData::ImiSkeletonOrientationState)jarg2; 
  if (arg1) (arg1)->upSkeletonsOrientationState = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1upSkeletonsOrientationState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiBodySkeletonData::ImiSkeletonOrientationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  result = (imimr::ImiBodySkeletonData::ImiSkeletonOrientationState) ((arg1)->upSkeletonsOrientationState);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1upSkeletonsOrientation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiMat3f *arg2 = (imimr::ImiMat3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  arg2 = *(imimr::ImiMat3f **)&jarg2; 
  if (arg1) (arg1)->upSkeletonsOrientation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1upSkeletonsOrientation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiMat3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  result = (imimr::ImiMat3f *)& ((arg1)->upSkeletonsOrientation);
  *(imimr::ImiMat3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1downSkeletonsOrientationState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiBodySkeletonData::ImiSkeletonOrientationState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  arg2 = (imimr::ImiBodySkeletonData::ImiSkeletonOrientationState)jarg2; 
  if (arg1) (arg1)->downSkeletonsOrientationState = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1downSkeletonsOrientationState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiBodySkeletonData::ImiSkeletonOrientationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  result = (imimr::ImiBodySkeletonData::ImiSkeletonOrientationState) ((arg1)->downSkeletonsOrientationState);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1downSkeletonsOrientation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiMat3f *arg2 = (imimr::ImiMat3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  arg2 = *(imimr::ImiMat3f **)&jarg2; 
  if (arg1) (arg1)->downSkeletonsOrientation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1downSkeletonsOrientation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiMat3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  result = (imimr::ImiMat3f *)& ((arg1)->downSkeletonsOrientation);
  *(imimr::ImiMat3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1skeletonOrientationStates_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiBodySkeletonData::ImiSkeletonOrientationState *arg2 = (imimr::ImiBodySkeletonData::ImiSkeletonOrientationState *) (imimr::ImiBodySkeletonData::ImiSkeletonOrientationState *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  {
    // in;
  }
  {
    // typemap(memberin)
    int len = jenv->GetArrayLength(jarg2);
    int n = (20<len) ? 20 : len;
    imimr::ImiBodySkeletonData::ImiSkeletonOrientationState* src = (imimr::ImiBodySkeletonData::ImiSkeletonOrientationState *) jenv->GetIntArrayElements(jarg2, 0);
    imimr::ImiBodySkeletonData::ImiSkeletonOrientationState* dst = arg1->skeletonOrientationStates;
    for(int i=0;i<n;i++, dst++, src++){
      *dst = *src;
    }
  }
  
}


SWIGEXPORT jintArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1skeletonOrientationStates_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiBodySkeletonData::ImiSkeletonOrientationState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  result = (imimr::ImiBodySkeletonData::ImiSkeletonOrientationState *)(imimr::ImiBodySkeletonData::ImiSkeletonOrientationState *) ((arg1)->skeletonOrientationStates);
  {
    int n = 20;
    jintArray res = jenv->NewIntArray(n);
    jenv->SetIntArrayRegion(res, 0, n, ( jint *) result);
    jresult = res;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1skeletonOrientations_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiSkeletonOrientationData *arg2 = (imimr::ImiSkeletonOrientationData *) (imimr::ImiSkeletonOrientationData *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  {
    // in;
  }
  {
    // typemap(memberin)
    int n = 20;
    size_t n1 = jenv->GetArrayLength(jarg2);
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiSkeletonOrientationData");
    // 获取名字为name的静态成员方法的ID，其中sig为类型签名
    jmethodID meth = jenv->GetStaticMethodID(clazz, "getCPtr", "(L"  "com/sximi/mragent/ImiSkeletonOrientationData"  ";)J");
    for(int i=0; i<n && i<n1; i++){
      jobject oo = jenv->GetObjectArrayElement(jarg2, i);
      imimr::ImiSkeletonOrientationData* ptr = (imimr::ImiSkeletonOrientationData*) jenv->CallStaticLongMethod(clazz, meth, oo);
      arg1->skeletonOrientations[i] = *(ptr);
    }
  }
  
}


SWIGEXPORT jobjectArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1skeletonOrientations_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiSkeletonOrientationData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  result = (imimr::ImiSkeletonOrientationData *)(imimr::ImiSkeletonOrientationData *) ((arg1)->skeletonOrientations);
  {
    int n = 20;
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiSkeletonOrientationData");
    if(clazz==0){
      return 0;
    }
    jmethodID meth = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
    if(meth==0){
      return 0;
    }
    jobjectArray res = jenv->NewObjectArray(n, clazz, NULL);
    for(int i=0; i<n; i++){
      imimr::ImiSkeletonOrientationData* ptr = new imimr::ImiSkeletonOrientationData(result[i]); 
      jobject oo = jenv->NewObject(clazz, meth, (jlong)ptr, (jboolean)true); 
      //printf("ptr=%x, oo=%x\n", ptr, oo);
      jenv->SetObjectArrayElement(res, i, oo);
    }
    jresult = res;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1poseState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiBodySkeletonData::ImiPoseState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  arg2 = (imimr::ImiBodySkeletonData::ImiPoseState)jarg2; 
  if (arg1) (arg1)->poseState = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1poseState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiBodySkeletonData::ImiPoseState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  result = (imimr::ImiBodySkeletonData::ImiPoseState) ((arg1)->poseState);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1feature_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiBodySkeletonData::ImiFeature *arg2 = (imimr::ImiBodySkeletonData::ImiFeature *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  arg2 = *(imimr::ImiBodySkeletonData::ImiFeature **)&jarg2; 
  if (arg1) (arg1)->feature = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1feature_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiBodySkeletonData::ImiFeature *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  result = (imimr::ImiBodySkeletonData::ImiFeature *)& ((arg1)->feature);
  *(imimr::ImiBodySkeletonData::ImiFeature **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1handState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiBodySkeletonData::ImiHandState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  arg2 = (imimr::ImiBodySkeletonData::ImiHandState)jarg2; 
  if (arg1) (arg1)->handState = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1handState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiBodySkeletonData::ImiHandState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  result = (imimr::ImiBodySkeletonData::ImiHandState) ((arg1)->handState);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1handRect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiBodySkeletonData::IMI_Rect *arg2 = (imimr::ImiBodySkeletonData::IMI_Rect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  arg2 = *(imimr::ImiBodySkeletonData::IMI_Rect **)&jarg2; 
  if (arg1) (arg1)->handRect = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1handRect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  imimr::ImiBodySkeletonData::IMI_Rect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  result = (imimr::ImiBodySkeletonData::IMI_Rect *)& ((arg1)->handRect);
  *(imimr::ImiBodySkeletonData::IMI_Rect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1getVertexes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->getVertexes(arg2,arg3);
}


SWIGEXPORT jintArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1getSkeletonLinkIndexes(JNIEnv *jenv, jclass jcls) {
  jintArray jresult = 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  (void)jenv;
  (void)jcls;
  result = imimr::ImiBodySkeletonData::getSkeletonLinkIndexes();
  {
    int _len = (&result)->size();
    jintArray res = jenv->NewIntArray(_len);
    jenv->SetIntArrayRegion(res, 0, _len, ( jint *) (&result)->data());
    jresult = res;
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  result = ((imimr::ImiBodySkeletonData const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiBodySkeletonData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeletonData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiBodySkeletonData *)new imimr::ImiBodySkeletonData();
  *(imimr::ImiBodySkeletonData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiBodySkeletonData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiBodySkeletonData *arg1 = (imimr::ImiBodySkeletonData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiBodySkeletonData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeleton_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiBodySkeleton *arg1 = (imimr::ImiBodySkeleton *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeleton **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeleton_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiBodySkeleton *arg1 = (imimr::ImiBodySkeleton *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeleton **)&jarg1; 
  result = (int) ((arg1)->width);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeleton_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiBodySkeleton *arg1 = (imimr::ImiBodySkeleton *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeleton **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeleton_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiBodySkeleton *arg1 = (imimr::ImiBodySkeleton *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeleton **)&jarg1; 
  result = (int) ((arg1)->height);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeleton_1floorClipPlane_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiBodySkeleton *arg1 = (imimr::ImiBodySkeleton *) 0 ;
  imimr::ImiVector4 *arg2 = (imimr::ImiVector4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiBodySkeleton **)&jarg1; 
  arg2 = *(imimr::ImiVector4 **)&jarg2; 
  if (arg1) (arg1)->floorClipPlane = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeleton_1floorClipPlane_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeleton *arg1 = (imimr::ImiBodySkeleton *) 0 ;
  imimr::ImiVector4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeleton **)&jarg1; 
  result = (imimr::ImiVector4 *)& ((arg1)->floorClipPlane);
  *(imimr::ImiVector4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeleton_1skeletonDatas_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  imimr::ImiBodySkeleton *arg1 = (imimr::ImiBodySkeleton *) 0 ;
  imimr::ImiBodySkeletonData *arg2 = (imimr::ImiBodySkeletonData *) (imimr::ImiBodySkeletonData *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeleton **)&jarg1; 
  {
    // in;
  }
  {
    // typemap(memberin)
    int n = 6;
    size_t n1 = jenv->GetArrayLength(jarg2);
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiBodySkeletonData");
    // 获取名字为name的静态成员方法的ID，其中sig为类型签名
    jmethodID meth = jenv->GetStaticMethodID(clazz, "getCPtr", "(L"  "com/sximi/mragent/ImiBodySkeletonData"  ";)J");
    for(int i=0; i<n && i<n1; i++){
      jobject oo = jenv->GetObjectArrayElement(jarg2, i);
      imimr::ImiBodySkeletonData* ptr = (imimr::ImiBodySkeletonData*) jenv->CallStaticLongMethod(clazz, meth, oo);
      arg1->skeletonDatas[i] = *(ptr);
    }
  }
  
}


SWIGEXPORT jobjectArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeleton_1skeletonDatas_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  imimr::ImiBodySkeleton *arg1 = (imimr::ImiBodySkeleton *) 0 ;
  imimr::ImiBodySkeletonData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeleton **)&jarg1; 
  result = (imimr::ImiBodySkeletonData *)(imimr::ImiBodySkeletonData *) ((arg1)->skeletonDatas);
  {
    int n = 6;
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiBodySkeletonData");
    if(clazz==0){
      return 0;
    }
    jmethodID meth = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
    if(meth==0){
      return 0;
    }
    jobjectArray res = jenv->NewObjectArray(n, clazz, NULL);
    for(int i=0; i<n; i++){
      imimr::ImiBodySkeletonData* ptr = new imimr::ImiBodySkeletonData(result[i]); 
      jobject oo = jenv->NewObject(clazz, meth, (jlong)ptr, (jboolean)true); 
      //printf("ptr=%x, oo=%x\n", ptr, oo);
      jenv->SetObjectArrayElement(res, i, oo);
    }
    jresult = res;
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeleton_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiBodySkeleton *arg1 = (imimr::ImiBodySkeleton *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeleton **)&jarg1; 
  result = ((imimr::ImiBodySkeleton const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeleton_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imimr::ImiBodySkeleton *arg1 = (imimr::ImiBodySkeleton *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeleton **)&jarg1; 
  result = (bool)((imimr::ImiBodySkeleton const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiBodySkeleton(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeleton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiBodySkeleton *)new imimr::ImiBodySkeleton();
  *(imimr::ImiBodySkeleton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeleton_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeleton *arg1 = (imimr::ImiBodySkeleton *) 0 ;
  int arg2 ;
  imimr::ImiBodySkeletonData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeleton **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (imimr::ImiBodySkeletonData *)imimr_ImiBodySkeleton_at(arg1,arg2);
  *(imimr::ImiBodySkeletonData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeleton_1atBodySkeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imimr::ImiBodySkeleton *arg1 = (imimr::ImiBodySkeleton *) 0 ;
  int arg2 ;
  imimr::ImiBodySkeletonData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiBodySkeleton **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (imimr::ImiBodySkeletonData *)imimr_ImiBodySkeleton_atBodySkeleton(arg1,arg2);
  *(imimr::ImiBodySkeletonData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiBodySkeleton(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiBodySkeleton *arg1 = (imimr::ImiBodySkeleton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiBodySkeleton **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1trackingState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiHandSkeletonData *arg1 = (imimr::ImiHandSkeletonData *) 0 ;
  imimr::ImiSkeletonTrackState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeletonData **)&jarg1; 
  arg2 = (imimr::ImiSkeletonTrackState)jarg2; 
  if (arg1) (arg1)->trackingState = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1trackingState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiHandSkeletonData *arg1 = (imimr::ImiHandSkeletonData *) 0 ;
  imimr::ImiSkeletonTrackState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeletonData **)&jarg1; 
  result = (imimr::ImiSkeletonTrackState) ((arg1)->trackingState);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1trackingID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imimr::ImiHandSkeletonData *arg1 = (imimr::ImiHandSkeletonData *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeletonData **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->trackingID = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1trackingID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiHandSkeletonData *arg1 = (imimr::ImiHandSkeletonData *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeletonData **)&jarg1; 
  result = (uint32_t) ((arg1)->trackingID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1handType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiHandSkeletonData *arg1 = (imimr::ImiHandSkeletonData *) 0 ;
  imimr::ImiHandSkeletonData::ImiHandType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeletonData **)&jarg1; 
  arg2 = (imimr::ImiHandSkeletonData::ImiHandType)jarg2; 
  if (arg1) (arg1)->handType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1handType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiHandSkeletonData *arg1 = (imimr::ImiHandSkeletonData *) 0 ;
  imimr::ImiHandSkeletonData::ImiHandType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeletonData **)&jarg1; 
  result = (imimr::ImiHandSkeletonData::ImiHandType) ((arg1)->handType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1handState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiHandSkeletonData *arg1 = (imimr::ImiHandSkeletonData *) 0 ;
  imimr::ImiHandSkeletonData::ImiHandState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeletonData **)&jarg1; 
  arg2 = (imimr::ImiHandSkeletonData::ImiHandState)jarg2; 
  if (arg1) (arg1)->handState = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1handState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiHandSkeletonData *arg1 = (imimr::ImiHandSkeletonData *) 0 ;
  imimr::ImiHandSkeletonData::ImiHandState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeletonData **)&jarg1; 
  result = (imimr::ImiHandSkeletonData::ImiHandState) ((arg1)->handState);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1wristPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiHandSkeletonData *arg1 = (imimr::ImiHandSkeletonData *) 0 ;
  imimr::ImiVector4 *arg2 = (imimr::ImiVector4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiHandSkeletonData **)&jarg1; 
  arg2 = *(imimr::ImiVector4 **)&jarg2; 
  if (arg1) (arg1)->wristPosition = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1wristPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiHandSkeletonData *arg1 = (imimr::ImiHandSkeletonData *) 0 ;
  imimr::ImiVector4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeletonData **)&jarg1; 
  result = (imimr::ImiVector4 *)& ((arg1)->wristPosition);
  *(imimr::ImiVector4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1skeletonPositions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  imimr::ImiHandSkeletonData *arg1 = (imimr::ImiHandSkeletonData *) 0 ;
  imimr::ImiVector4 *arg2 = (imimr::ImiVector4 *) (imimr::ImiVector4 *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeletonData **)&jarg1; 
  {
    // in;
  }
  {
    // typemap(memberin)
    int n = 21;
    size_t n1 = jenv->GetArrayLength(jarg2);
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiVector4");
    // 获取名字为name的静态成员方法的ID，其中sig为类型签名
    jmethodID meth = jenv->GetStaticMethodID(clazz, "getCPtr", "(L"  "com/sximi/mragent/ImiVector4"  ";)J");
    for(int i=0; i<n && i<n1; i++){
      jobject oo = jenv->GetObjectArrayElement(jarg2, i);
      imimr::ImiVector4* ptr = (imimr::ImiVector4*) jenv->CallStaticLongMethod(clazz, meth, oo);
      arg1->skeletonPositions[i] = *(ptr);
    }
  }
  
}


SWIGEXPORT jobjectArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1skeletonPositions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  imimr::ImiHandSkeletonData *arg1 = (imimr::ImiHandSkeletonData *) 0 ;
  imimr::ImiVector4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeletonData **)&jarg1; 
  result = (imimr::ImiVector4 *)(imimr::ImiVector4 *) ((arg1)->skeletonPositions);
  {
    int n = 21;
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiVector4");
    if(clazz==0){
      return 0;
    }
    jmethodID meth = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
    if(meth==0){
      return 0;
    }
    jobjectArray res = jenv->NewObjectArray(n, clazz, NULL);
    for(int i=0; i<n; i++){
      imimr::ImiVector4* ptr = new imimr::ImiVector4(result[i]); 
      jobject oo = jenv->NewObject(clazz, meth, (jlong)ptr, (jboolean)true); 
      //printf("ptr=%x, oo=%x\n", ptr, oo);
      jenv->SetObjectArrayElement(res, i, oo);
    }
    jresult = res;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1skeletonOrientations_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  imimr::ImiHandSkeletonData *arg1 = (imimr::ImiHandSkeletonData *) 0 ;
  imimr::ImiSkeletonOrientationData *arg2 = (imimr::ImiSkeletonOrientationData *) (imimr::ImiSkeletonOrientationData *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeletonData **)&jarg1; 
  {
    // in;
  }
  {
    // typemap(memberin)
    int n = 21;
    size_t n1 = jenv->GetArrayLength(jarg2);
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiSkeletonOrientationData");
    // 获取名字为name的静态成员方法的ID，其中sig为类型签名
    jmethodID meth = jenv->GetStaticMethodID(clazz, "getCPtr", "(L"  "com/sximi/mragent/ImiSkeletonOrientationData"  ";)J");
    for(int i=0; i<n && i<n1; i++){
      jobject oo = jenv->GetObjectArrayElement(jarg2, i);
      imimr::ImiSkeletonOrientationData* ptr = (imimr::ImiSkeletonOrientationData*) jenv->CallStaticLongMethod(clazz, meth, oo);
      arg1->skeletonOrientations[i] = *(ptr);
    }
  }
  
}


SWIGEXPORT jobjectArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1skeletonOrientations_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  imimr::ImiHandSkeletonData *arg1 = (imimr::ImiHandSkeletonData *) 0 ;
  imimr::ImiSkeletonOrientationData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeletonData **)&jarg1; 
  result = (imimr::ImiSkeletonOrientationData *)(imimr::ImiSkeletonOrientationData *) ((arg1)->skeletonOrientations);
  {
    int n = 21;
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiSkeletonOrientationData");
    if(clazz==0){
      return 0;
    }
    jmethodID meth = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
    if(meth==0){
      return 0;
    }
    jobjectArray res = jenv->NewObjectArray(n, clazz, NULL);
    for(int i=0; i<n; i++){
      imimr::ImiSkeletonOrientationData* ptr = new imimr::ImiSkeletonOrientationData(result[i]); 
      jobject oo = jenv->NewObject(clazz, meth, (jlong)ptr, (jboolean)true); 
      //printf("ptr=%x, oo=%x\n", ptr, oo);
      jenv->SetObjectArrayElement(res, i, oo);
    }
    jresult = res;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1getVertexes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  imimr::ImiHandSkeletonData *arg1 = (imimr::ImiHandSkeletonData *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeletonData **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->getVertexes(arg2,arg3);
}


SWIGEXPORT jintArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1getSkeletonLinkIndexes(JNIEnv *jenv, jclass jcls) {
  jintArray jresult = 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  (void)jenv;
  (void)jcls;
  result = imimr::ImiHandSkeletonData::getSkeletonLinkIndexes();
  {
    int _len = (&result)->size();
    jintArray res = jenv->NewIntArray(_len);
    jenv->SetIntArrayRegion(res, 0, _len, ( jint *) (&result)->data());
    jresult = res;
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiHandSkeletonData *arg1 = (imimr::ImiHandSkeletonData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeletonData **)&jarg1; 
  result = ((imimr::ImiHandSkeletonData const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiHandSkeletonData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiHandSkeletonData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiHandSkeletonData *)new imimr::ImiHandSkeletonData();
  *(imimr::ImiHandSkeletonData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiHandSkeletonData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiHandSkeletonData *arg1 = (imimr::ImiHandSkeletonData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiHandSkeletonData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeleton_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiHandSkeleton *arg1 = (imimr::ImiHandSkeleton *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeleton **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeleton_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiHandSkeleton *arg1 = (imimr::ImiHandSkeleton *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeleton **)&jarg1; 
  result = (int) ((arg1)->width);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeleton_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiHandSkeleton *arg1 = (imimr::ImiHandSkeleton *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeleton **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeleton_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiHandSkeleton *arg1 = (imimr::ImiHandSkeleton *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeleton **)&jarg1; 
  result = (int) ((arg1)->height);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeleton_1handSkeletonDatas_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  imimr::ImiHandSkeleton *arg1 = (imimr::ImiHandSkeleton *) 0 ;
  imimr::ImiHandSkeletonData *arg2 = (imimr::ImiHandSkeletonData *) (imimr::ImiHandSkeletonData *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeleton **)&jarg1; 
  {
    // in;
  }
  {
    // typemap(memberin)
    int n = 2;
    size_t n1 = jenv->GetArrayLength(jarg2);
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiHandSkeletonData");
    // 获取名字为name的静态成员方法的ID，其中sig为类型签名
    jmethodID meth = jenv->GetStaticMethodID(clazz, "getCPtr", "(L"  "com/sximi/mragent/ImiHandSkeletonData"  ";)J");
    for(int i=0; i<n && i<n1; i++){
      jobject oo = jenv->GetObjectArrayElement(jarg2, i);
      imimr::ImiHandSkeletonData* ptr = (imimr::ImiHandSkeletonData*) jenv->CallStaticLongMethod(clazz, meth, oo);
      arg1->handSkeletonDatas[i] = *(ptr);
    }
  }
  
}


SWIGEXPORT jobjectArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeleton_1handSkeletonDatas_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  imimr::ImiHandSkeleton *arg1 = (imimr::ImiHandSkeleton *) 0 ;
  imimr::ImiHandSkeletonData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeleton **)&jarg1; 
  result = (imimr::ImiHandSkeletonData *)(imimr::ImiHandSkeletonData *) ((arg1)->handSkeletonDatas);
  {
    int n = 2;
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiHandSkeletonData");
    if(clazz==0){
      return 0;
    }
    jmethodID meth = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
    if(meth==0){
      return 0;
    }
    jobjectArray res = jenv->NewObjectArray(n, clazz, NULL);
    for(int i=0; i<n; i++){
      imimr::ImiHandSkeletonData* ptr = new imimr::ImiHandSkeletonData(result[i]); 
      jobject oo = jenv->NewObject(clazz, meth, (jlong)ptr, (jboolean)true); 
      //printf("ptr=%x, oo=%x\n", ptr, oo);
      jenv->SetObjectArrayElement(res, i, oo);
    }
    jresult = res;
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeleton_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiHandSkeleton *arg1 = (imimr::ImiHandSkeleton *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeleton **)&jarg1; 
  result = ((imimr::ImiHandSkeleton const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeleton_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imimr::ImiHandSkeleton *arg1 = (imimr::ImiHandSkeleton *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiHandSkeleton **)&jarg1; 
  result = (bool)((imimr::ImiHandSkeleton const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiHandSkeleton(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiHandSkeleton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiHandSkeleton *)new imimr::ImiHandSkeleton();
  *(imimr::ImiHandSkeleton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiHandSkeleton(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiHandSkeleton *arg1 = (imimr::ImiHandSkeleton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiHandSkeleton **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiForegroundData_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiForegroundData *arg1 = (imimr::ImiForegroundData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiForegroundData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiForegroundData_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiForegroundData *arg1 = (imimr::ImiForegroundData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiForegroundData **)&jarg1; 
  result = (int) ((arg1)->width);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiForegroundData_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiForegroundData *arg1 = (imimr::ImiForegroundData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiForegroundData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiForegroundData_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiForegroundData *arg1 = (imimr::ImiForegroundData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiForegroundData **)&jarg1; 
  result = (int) ((arg1)->height);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiForegroundData_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiForegroundData *arg1 = (imimr::ImiForegroundData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiForegroundData **)&jarg1; 
  result = (int)((imimr::ImiForegroundData const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiForegroundData_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiForegroundData *arg1 = (imimr::ImiForegroundData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiForegroundData **)&jarg1; 
  result = ((imimr::ImiForegroundData const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiForegroundData_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imimr::ImiForegroundData *arg1 = (imimr::ImiForegroundData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiForegroundData **)&jarg1; 
  result = (bool)((imimr::ImiForegroundData const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiForegroundData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiForegroundData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiForegroundData *)new imimr::ImiForegroundData();
  *(imimr::ImiForegroundData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiForegroundData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiForegroundData *arg1 = (imimr::ImiForegroundData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiForegroundData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMattingData_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiMattingData *arg1 = (imimr::ImiMattingData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMattingData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMattingData_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiMattingData *arg1 = (imimr::ImiMattingData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMattingData **)&jarg1; 
  result = (int) ((arg1)->width);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMattingData_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiMattingData *arg1 = (imimr::ImiMattingData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMattingData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMattingData_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiMattingData *arg1 = (imimr::ImiMattingData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMattingData **)&jarg1; 
  result = (int) ((arg1)->height);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMattingData_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiMattingData *arg1 = (imimr::ImiMattingData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMattingData **)&jarg1; 
  result = ((imimr::ImiMattingData const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMattingData_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imimr::ImiMattingData *arg1 = (imimr::ImiMattingData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMattingData **)&jarg1; 
  result = (bool)((imimr::ImiMattingData const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiMattingData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiMattingData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiMattingData *)new imimr::ImiMattingData();
  *(imimr::ImiMattingData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiMattingData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiMattingData *arg1 = (imimr::ImiMattingData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiMattingData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceFeatureData_1trackingID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imimr::ImiFaceFeatureData *arg1 = (imimr::ImiFaceFeatureData *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceFeatureData **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->trackingID = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceFeatureData_1trackingID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiFaceFeatureData *arg1 = (imimr::ImiFaceFeatureData *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceFeatureData **)&jarg1; 
  result = (uint32_t) ((arg1)->trackingID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceFeatureData_1bFeatureValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiFaceFeatureData *arg1 = (imimr::ImiFaceFeatureData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceFeatureData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->bFeatureValid = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceFeatureData_1bFeatureValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiFaceFeatureData *arg1 = (imimr::ImiFaceFeatureData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceFeatureData **)&jarg1; 
  result = (uint8_t) ((arg1)->bFeatureValid);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceFeatureData_1faceRect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiFaceFeatureData *arg1 = (imimr::ImiFaceFeatureData *) 0 ;
  imimr::ImiRect *arg2 = (imimr::ImiRect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiFaceFeatureData **)&jarg1; 
  arg2 = *(imimr::ImiRect **)&jarg2; 
  if (arg1) (arg1)->faceRect = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceFeatureData_1faceRect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiFaceFeatureData *arg1 = (imimr::ImiFaceFeatureData *) 0 ;
  imimr::ImiRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceFeatureData **)&jarg1; 
  result = (imimr::ImiRect *)& ((arg1)->faceRect);
  *(imimr::ImiRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceFeatureData_1faceSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imimr::ImiFaceFeatureData *arg1 = (imimr::ImiFaceFeatureData *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceFeatureData **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->faceSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceFeatureData_1faceSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiFaceFeatureData *arg1 = (imimr::ImiFaceFeatureData *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceFeatureData **)&jarg1; 
  result = (uint32_t) ((arg1)->faceSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceFeatureData_1faceFeatures_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiFaceFeatureData *arg1 = (imimr::ImiFaceFeatureData *) 0 ;
  imimr::ImiFaceFeatureVec *arg2 = (imimr::ImiFaceFeatureVec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiFaceFeatureData **)&jarg1; 
  arg2 = *(imimr::ImiFaceFeatureVec **)&jarg2; 
  if (arg1) (arg1)->faceFeatures = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceFeatureData_1faceFeatures_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiFaceFeatureData *arg1 = (imimr::ImiFaceFeatureData *) 0 ;
  imimr::ImiFaceFeatureVec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceFeatureData **)&jarg1; 
  result = (imimr::ImiFaceFeatureVec *)& ((arg1)->faceFeatures);
  *(imimr::ImiFaceFeatureVec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceFeatureData_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiFaceFeatureData *arg1 = (imimr::ImiFaceFeatureData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiFaceFeatureData **)&jarg1; 
  result = ((imimr::ImiFaceFeatureData const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiFaceFeatureData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiFaceFeatureData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiFaceFeatureData *)new imimr::ImiFaceFeatureData();
  *(imimr::ImiFaceFeatureData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiFaceFeatureData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiFaceFeatureData *arg1 = (imimr::ImiFaceFeatureData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiFaceFeatureData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1BallPosition_1fRadius_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiMoveTrackData::BallPosition *arg1 = (imimr::ImiMoveTrackData::BallPosition *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::BallPosition **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fRadius = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1BallPosition_1fRadius_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiMoveTrackData::BallPosition *arg1 = (imimr::ImiMoveTrackData::BallPosition *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::BallPosition **)&jarg1; 
  result = (float) ((arg1)->fRadius);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1BallPosition_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiMoveTrackData::BallPosition *arg1 = (imimr::ImiMoveTrackData::BallPosition *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::BallPosition **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1BallPosition_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiMoveTrackData::BallPosition *arg1 = (imimr::ImiMoveTrackData::BallPosition *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::BallPosition **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1BallPosition_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiMoveTrackData::BallPosition *arg1 = (imimr::ImiMoveTrackData::BallPosition *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::BallPosition **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1BallPosition_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiMoveTrackData::BallPosition *arg1 = (imimr::ImiMoveTrackData::BallPosition *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::BallPosition **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1BallPosition_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiMoveTrackData::BallPosition *arg1 = (imimr::ImiMoveTrackData::BallPosition *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::BallPosition **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1BallPosition_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiMoveTrackData::BallPosition *arg1 = (imimr::ImiMoveTrackData::BallPosition *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::BallPosition **)&jarg1; 
  result = (float) ((arg1)->z);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiMoveTrackData_1BallPosition(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiMoveTrackData::BallPosition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiMoveTrackData::BallPosition *)new imimr::ImiMoveTrackData::BallPosition();
  *(imimr::ImiMoveTrackData::BallPosition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiMoveTrackData_1BallPosition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiMoveTrackData::BallPosition *arg1 = (imimr::ImiMoveTrackData::BallPosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiMoveTrackData::BallPosition **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1ImiBallRGBA_1r_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiMoveTrackData::ImiBallRGBA *arg1 = (imimr::ImiMoveTrackData::ImiBallRGBA *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::ImiBallRGBA **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1ImiBallRGBA_1r_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiMoveTrackData::ImiBallRGBA *arg1 = (imimr::ImiMoveTrackData::ImiBallRGBA *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::ImiBallRGBA **)&jarg1; 
  result = (uint8_t) ((arg1)->r);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1ImiBallRGBA_1g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiMoveTrackData::ImiBallRGBA *arg1 = (imimr::ImiMoveTrackData::ImiBallRGBA *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::ImiBallRGBA **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1ImiBallRGBA_1g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiMoveTrackData::ImiBallRGBA *arg1 = (imimr::ImiMoveTrackData::ImiBallRGBA *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::ImiBallRGBA **)&jarg1; 
  result = (uint8_t) ((arg1)->g);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1ImiBallRGBA_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiMoveTrackData::ImiBallRGBA *arg1 = (imimr::ImiMoveTrackData::ImiBallRGBA *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::ImiBallRGBA **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1ImiBallRGBA_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiMoveTrackData::ImiBallRGBA *arg1 = (imimr::ImiMoveTrackData::ImiBallRGBA *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::ImiBallRGBA **)&jarg1; 
  result = (uint8_t) ((arg1)->b);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1ImiBallRGBA_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiMoveTrackData::ImiBallRGBA *arg1 = (imimr::ImiMoveTrackData::ImiBallRGBA *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::ImiBallRGBA **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1ImiBallRGBA_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiMoveTrackData::ImiBallRGBA *arg1 = (imimr::ImiMoveTrackData::ImiBallRGBA *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::ImiBallRGBA **)&jarg1; 
  result = (uint8_t) ((arg1)->a);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1ImiBallRGBA_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiMoveTrackData::ImiBallRGBA *arg1 = (imimr::ImiMoveTrackData::ImiBallRGBA *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::ImiBallRGBA **)&jarg1; 
  result = ((imimr::ImiMoveTrackData::ImiBallRGBA const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiMoveTrackData_1ImiBallRGBA(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiMoveTrackData::ImiBallRGBA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiMoveTrackData::ImiBallRGBA *)new imimr::ImiMoveTrackData::ImiBallRGBA();
  *(imimr::ImiMoveTrackData::ImiBallRGBA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiMoveTrackData_1ImiBallRGBA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiMoveTrackData::ImiBallRGBA *arg1 = (imimr::ImiMoveTrackData::ImiBallRGBA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiMoveTrackData::ImiBallRGBA **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1BallInfo_1rgb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiMoveTrackData::BallInfo *arg1 = (imimr::ImiMoveTrackData::BallInfo *) 0 ;
  imimr::ImiMoveTrackData::ImiBallRGBA *arg2 = (imimr::ImiMoveTrackData::ImiBallRGBA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiMoveTrackData::BallInfo **)&jarg1; 
  arg2 = *(imimr::ImiMoveTrackData::ImiBallRGBA **)&jarg2; 
  if (arg1) (arg1)->rgb = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1BallInfo_1rgb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiMoveTrackData::BallInfo *arg1 = (imimr::ImiMoveTrackData::BallInfo *) 0 ;
  imimr::ImiMoveTrackData::ImiBallRGBA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::BallInfo **)&jarg1; 
  result = (imimr::ImiMoveTrackData::ImiBallRGBA *)& ((arg1)->rgb);
  *(imimr::ImiMoveTrackData::ImiBallRGBA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1BallInfo_1pos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiMoveTrackData::BallInfo *arg1 = (imimr::ImiMoveTrackData::BallInfo *) 0 ;
  imimr::ImiMoveTrackData::BallPosition *arg2 = (imimr::ImiMoveTrackData::BallPosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiMoveTrackData::BallInfo **)&jarg1; 
  arg2 = *(imimr::ImiMoveTrackData::BallPosition **)&jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1BallInfo_1pos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiMoveTrackData::BallInfo *arg1 = (imimr::ImiMoveTrackData::BallInfo *) 0 ;
  imimr::ImiMoveTrackData::BallPosition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::BallInfo **)&jarg1; 
  result = (imimr::ImiMoveTrackData::BallPosition *)& ((arg1)->pos);
  *(imimr::ImiMoveTrackData::BallPosition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1BallInfo_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiMoveTrackData::BallInfo *arg1 = (imimr::ImiMoveTrackData::BallInfo *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData::BallInfo **)&jarg1; 
  result = ((imimr::ImiMoveTrackData::BallInfo const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiMoveTrackData_1BallInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiMoveTrackData::BallInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiMoveTrackData::BallInfo *)new imimr::ImiMoveTrackData::BallInfo();
  *(imimr::ImiMoveTrackData::BallInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiMoveTrackData_1BallInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiMoveTrackData::BallInfo *arg1 = (imimr::ImiMoveTrackData::BallInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiMoveTrackData::BallInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1nValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->nValid = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1nValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  result = (uint8_t) ((arg1)->nValid);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1nSeq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->nSeq = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1nSeq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  result = (uint8_t) ((arg1)->nSeq);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1rev1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->rev1 = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1rev1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  result = (uint8_t) ((arg1)->rev1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1rev2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->rev2 = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1rev2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  result = (uint8_t) ((arg1)->rev2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1fADvoltage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fADvoltage = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1fADvoltage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  result = (float) ((arg1)->fADvoltage);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1imuData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  imimr::ImiVector4 *arg2 = (imimr::ImiVector4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  arg2 = *(imimr::ImiVector4 **)&jarg2; 
  if (arg1) (arg1)->imuData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1imuData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  imimr::ImiVector4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  result = (imimr::ImiVector4 *)& ((arg1)->imuData);
  *(imimr::ImiVector4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1ballInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  imimr::ImiMoveTrackData::BallInfo *arg2 = (imimr::ImiMoveTrackData::BallInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  arg2 = *(imimr::ImiMoveTrackData::BallInfo **)&jarg2; 
  if (arg1) (arg1)->ballInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1ballInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  imimr::ImiMoveTrackData::BallInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  result = (imimr::ImiMoveTrackData::BallInfo *)& ((arg1)->ballInfo);
  *(imimr::ImiMoveTrackData::BallInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1btnState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  imimr::ImiMoveTrackData::ButtonSate *arg2 = (imimr::ImiMoveTrackData::ButtonSate *) (imimr::ImiMoveTrackData::ButtonSate *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  {
    // in;
  }
  {
    // typemap(memberin)
    int len = jenv->GetArrayLength(jarg2);
    int n = (8<len) ? 8 : len;
    imimr::ImiMoveTrackData::ButtonSate* src = (imimr::ImiMoveTrackData::ButtonSate *) jenv->GetIntArrayElements(jarg2, 0);
    imimr::ImiMoveTrackData::ButtonSate* dst = arg1->btnState;
    for(int i=0;i<n;i++, dst++, src++){
      *dst = *src;
    }
  }
  
}


SWIGEXPORT jintArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1btnState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  imimr::ImiMoveTrackData::ButtonSate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  result = (imimr::ImiMoveTrackData::ButtonSate *)(imimr::ImiMoveTrackData::ButtonSate *) ((arg1)->btnState);
  {
    int n = 8;
    jintArray res = jenv->NewIntArray(n);
    jenv->SetIntArrayRegion(res, 0, n, ( jint *) result);
    jresult = res;
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  result = ((imimr::ImiMoveTrackData const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiMoveTrackData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiMoveTrackData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiMoveTrackData *)new imimr::ImiMoveTrackData();
  *(imimr::ImiMoveTrackData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiMoveTrackData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiMoveTrackData *arg1 = (imimr::ImiMoveTrackData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiMoveTrackData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveData_1moveTrackData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  imimr::ImiMoveData *arg1 = (imimr::ImiMoveData *) 0 ;
  imimr::ImiMoveTrackData *arg2 = (imimr::ImiMoveTrackData *) (imimr::ImiMoveTrackData *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveData **)&jarg1; 
  {
    // in;
  }
  {
    // typemap(memberin)
    int n = 4;
    size_t n1 = jenv->GetArrayLength(jarg2);
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiMoveTrackData");
    // 获取名字为name的静态成员方法的ID，其中sig为类型签名
    jmethodID meth = jenv->GetStaticMethodID(clazz, "getCPtr", "(L"  "com/sximi/mragent/ImiMoveTrackData"  ";)J");
    for(int i=0; i<n && i<n1; i++){
      jobject oo = jenv->GetObjectArrayElement(jarg2, i);
      imimr::ImiMoveTrackData* ptr = (imimr::ImiMoveTrackData*) jenv->CallStaticLongMethod(clazz, meth, oo);
      arg1->moveTrackData[i] = *(ptr);
    }
  }
  
}


SWIGEXPORT jobjectArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveData_1moveTrackData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  imimr::ImiMoveData *arg1 = (imimr::ImiMoveData *) 0 ;
  imimr::ImiMoveTrackData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveData **)&jarg1; 
  result = (imimr::ImiMoveTrackData *)(imimr::ImiMoveTrackData *) ((arg1)->moveTrackData);
  {
    int n = 4;
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiMoveTrackData");
    if(clazz==0){
      return 0;
    }
    jmethodID meth = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
    if(meth==0){
      return 0;
    }
    jobjectArray res = jenv->NewObjectArray(n, clazz, NULL);
    for(int i=0; i<n; i++){
      imimr::ImiMoveTrackData* ptr = new imimr::ImiMoveTrackData(result[i]); 
      jobject oo = jenv->NewObject(clazz, meth, (jlong)ptr, (jboolean)true); 
      //printf("ptr=%x, oo=%x\n", ptr, oo);
      jenv->SetObjectArrayElement(res, i, oo);
    }
    jresult = res;
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveData_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiMoveData *arg1 = (imimr::ImiMoveData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiMoveData **)&jarg1; 
  result = ((imimr::ImiMoveData const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiMoveData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiMoveData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiMoveData *)new imimr::ImiMoveData();
  *(imimr::ImiMoveData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiMoveData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiMoveData *arg1 = (imimr::ImiMoveData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiMoveData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiSlamPoseData_1trackState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imimr::ImiSlamPoseData *arg1 = (imimr::ImiSlamPoseData *) 0 ;
  imimr::ImiSlamPoseData::SlamPoseTrackingState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiSlamPoseData **)&jarg1; 
  arg2 = (imimr::ImiSlamPoseData::SlamPoseTrackingState)jarg2; 
  if (arg1) (arg1)->trackState = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiSlamPoseData_1trackState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imimr::ImiSlamPoseData *arg1 = (imimr::ImiSlamPoseData *) 0 ;
  imimr::ImiSlamPoseData::SlamPoseTrackingState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiSlamPoseData **)&jarg1; 
  result = (imimr::ImiSlamPoseData::SlamPoseTrackingState) ((arg1)->trackState);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiSlamPoseData_1cameraPose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiSlamPoseData *arg1 = (imimr::ImiSlamPoseData *) 0 ;
  imimr::ImiMat4f *arg2 = (imimr::ImiMat4f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiSlamPoseData **)&jarg1; 
  arg2 = *(imimr::ImiMat4f **)&jarg2; 
  if (arg1) (arg1)->cameraPose = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiSlamPoseData_1cameraPose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiSlamPoseData *arg1 = (imimr::ImiSlamPoseData *) 0 ;
  imimr::ImiMat4f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiSlamPoseData **)&jarg1; 
  result = (imimr::ImiMat4f *)& ((arg1)->cameraPose);
  *(imimr::ImiMat4f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiSlamPoseData_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiSlamPoseData *arg1 = (imimr::ImiSlamPoseData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiSlamPoseData **)&jarg1; 
  result = ((imimr::ImiSlamPoseData const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiSlamPoseData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiSlamPoseData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiSlamPoseData *)new imimr::ImiSlamPoseData();
  *(imimr::ImiSlamPoseData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiSlamPoseData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiSlamPoseData *arg1 = (imimr::ImiSlamPoseData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiSlamPoseData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiPositionTrackData_1slamPose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiPositionTrackData *arg1 = (imimr::ImiPositionTrackData *) 0 ;
  imimr::ImiSlamPoseData *arg2 = (imimr::ImiSlamPoseData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiPositionTrackData **)&jarg1; 
  arg2 = *(imimr::ImiSlamPoseData **)&jarg2; 
  if (arg1) (arg1)->slamPose = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiPositionTrackData_1slamPose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiPositionTrackData *arg1 = (imimr::ImiPositionTrackData *) 0 ;
  imimr::ImiSlamPoseData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiPositionTrackData **)&jarg1; 
  result = (imimr::ImiSlamPoseData *)& ((arg1)->slamPose);
  *(imimr::ImiSlamPoseData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiPositionTrackData_1moveTrackData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  imimr::ImiPositionTrackData *arg1 = (imimr::ImiPositionTrackData *) 0 ;
  imimr::ImiMoveTrackData *arg2 = (imimr::ImiMoveTrackData *) (imimr::ImiMoveTrackData *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiPositionTrackData **)&jarg1; 
  {
    // in;
  }
  {
    // typemap(memberin)
    int n = 4;
    size_t n1 = jenv->GetArrayLength(jarg2);
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiMoveTrackData");
    // 获取名字为name的静态成员方法的ID，其中sig为类型签名
    jmethodID meth = jenv->GetStaticMethodID(clazz, "getCPtr", "(L"  "com/sximi/mragent/ImiMoveTrackData"  ";)J");
    for(int i=0; i<n && i<n1; i++){
      jobject oo = jenv->GetObjectArrayElement(jarg2, i);
      imimr::ImiMoveTrackData* ptr = (imimr::ImiMoveTrackData*) jenv->CallStaticLongMethod(clazz, meth, oo);
      arg1->moveTrackData[i] = *(ptr);
    }
  }
  
}


SWIGEXPORT jobjectArray JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiPositionTrackData_1moveTrackData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  imimr::ImiPositionTrackData *arg1 = (imimr::ImiPositionTrackData *) 0 ;
  imimr::ImiMoveTrackData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiPositionTrackData **)&jarg1; 
  result = (imimr::ImiMoveTrackData *)(imimr::ImiMoveTrackData *) ((arg1)->moveTrackData);
  {
    int n = 4;
    jclass clazz = jenv->FindClass("com/sximi/mragent/ImiMoveTrackData");
    if(clazz==0){
      return 0;
    }
    jmethodID meth = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
    if(meth==0){
      return 0;
    }
    jobjectArray res = jenv->NewObjectArray(n, clazz, NULL);
    for(int i=0; i<n; i++){
      imimr::ImiMoveTrackData* ptr = new imimr::ImiMoveTrackData(result[i]); 
      jobject oo = jenv->NewObject(clazz, meth, (jlong)ptr, (jboolean)true); 
      //printf("ptr=%x, oo=%x\n", ptr, oo);
      jenv->SetObjectArrayElement(res, i, oo);
    }
    jresult = res;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiPositionTrackData_1accData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imimr::ImiPositionTrackData *arg1 = (imimr::ImiPositionTrackData *) 0 ;
  imimr::ImiVector4 *arg2 = (imimr::ImiVector4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imimr::ImiPositionTrackData **)&jarg1; 
  arg2 = *(imimr::ImiVector4 **)&jarg2; 
  if (arg1) (arg1)->accData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiPositionTrackData_1accData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imimr::ImiPositionTrackData *arg1 = (imimr::ImiPositionTrackData *) 0 ;
  imimr::ImiVector4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiPositionTrackData **)&jarg1; 
  result = (imimr::ImiVector4 *)& ((arg1)->accData);
  *(imimr::ImiVector4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiPositionTrackData_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imimr::ImiPositionTrackData *arg1 = (imimr::ImiPositionTrackData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imimr::ImiPositionTrackData **)&jarg1; 
  result = ((imimr::ImiPositionTrackData const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_new_1ImiPositionTrackData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imimr::ImiPositionTrackData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imimr::ImiPositionTrackData *)new imimr::ImiPositionTrackData();
  *(imimr::ImiPositionTrackData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_delete_1ImiPositionTrackData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imimr::ImiPositionTrackData *arg1 = (imimr::ImiPositionTrackData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imimr::ImiPositionTrackData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVersions_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiVersions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiDeviceAttribute_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiDeviceAttribute **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiCameraIntrinsic_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiCameraIntrinsic **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiRect_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiRect **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiPoint2D_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiPoint2D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceDetectData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiFaceDetectData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_LogConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::LogConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiVector4I_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiVector4I **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceFeatureVec_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiFaceFeatureVec **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiSkeletonOrientationData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiSkeletonOrientationData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeletonData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiBodySkeletonData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiBodySkeleton_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiBodySkeleton **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeletonData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiHandSkeletonData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiHandSkeleton_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiHandSkeleton **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiForegroundData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiForegroundData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMattingData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiMattingData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiFaceFeatureData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiFaceFeatureData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveTrackData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiMoveTrackData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiMoveData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiMoveData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiSlamPoseData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiSlamPoseData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sximi_mragent_mragent_1data_1javaJNI_ImiPositionTrackData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ImiData **)&baseptr = *(imimr::ImiPositionTrackData **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

// JNI C++ init code

// JNIEXPORT jlong JNICALL Java_com_sximi_mr_AndroidAppContext_getSwigCPtr(JNIEnv *env, jobject obj) {
//     jclass clazz = env->FindClass("com/sximi/mr/AppContext");
//     jfieldID fieldID = env->GetFieldID(clazz, "swigCPtr", "J");
//     return env->GetLongField(obj, fieldID);
// }


